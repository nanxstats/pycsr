---
title: "Study Population"
format: gfm
---

This article demonstrates how to create an analysis population overview table.

## Setup

```{python}
import polars as pl
import rtflite as rtf
```

## Load Data 

```{python}
adsl = pl.read_parquet("data/adsl.parquet")
```

## Create Population Table

```{python}
# Step 1: Calculate total N for each treatment (denominator for percentages)
totals = adsl.group_by("TRT01P").agg(
    total = pl.len()
)

totals
```

## Step 2: Calculate counts for each population flag

```{python}
# Simple function to count participants by treatment group
def count_by_treatment(data, population_name):
    """Count participants by treatment group and add population label"""
    return data.group_by("TRT01P").agg(
        n = pl.len()
    ).with_columns(
        population = pl.lit(population_name)
    )
```

```{python}
# Row 1: Total participants (no filter needed)
pop_all = count_by_treatment(
    data=adsl,
    population_name="Participants in population"
)

pop_all
```

```{python}
# Row 2: ITT population (filter first, then count)
adsl_itt = adsl.filter(pl.col("ITTFL") == "Y")
pop_itt = count_by_treatment(
    data=adsl_itt,
    population_name="Participants included in ITT population"
)

pop_itt
```

```{python}
# Row 3: Efficacy population (filter first, then count)
adsl_eff = adsl.filter(pl.col("EFFFL") == "Y")
pop_eff = count_by_treatment(
    data=adsl_eff,
    population_name="Participants included in efficacy population"
)

pop_eff
```

```{python}
# Row 4: Safety population (filter first, then count)
adsl_saf = adsl.filter(pl.col("SAFFL") == "Y")
pop_saf = count_by_treatment(
    data=adsl_saf,
    population_name="Participants included in safety population"
)

pop_saf
```

## Step 3: Stack all populations together

```{python}
# Combine all population dataframes into one
all_populations = pl.concat([
    pop_all,
    pop_itt,
    pop_eff,
    pop_saf
])

all_populations
```

## Step 4: Add total N and calculate percentages

```{python}
# Join with totals to calculate percentages
stats_with_pct = all_populations.join(
    totals,
    on="TRT01P"
).with_columns(
    pct = (100.0 * pl.col("n") / pl.col("total")).round(1)
)

stats_with_pct
```

## Step 5: Format the display text

```{python}
# First row shows just N, other rows show "N (pct)"
formatted_stats = stats_with_pct.with_columns(
    display = pl.when(pl.col("population") == "Participants in population")
        .then(pl.col("n").cast(str))
        .otherwise(
            pl.concat_str([
                pl.col("n").cast(str),
                pl.lit(" ("),
                pl.col("pct").round(1).cast(str),
                pl.lit(")")
            ])
        )
)

formatted_stats
```

## Step 6: Pivot from long to wide format

```{python}
# Transform to wide format for final table
df_overview = formatted_stats.pivot(
    values="display",
    index="population",
    on="TRT01P",
    maintain_order=True
).select(
    ["population", "Placebo", "Xanomeline Low Dose", "Xanomeline High Dose"]
).rename(
    {"population": ""}
)

df_overview
```

## Create RTF Output

```{python}
doc_overview = rtf.RTFDocument(
    df=df_overview,
    rtf_title=rtf.RTFTitle(
        text=["Analysis Population", "All Participants Randomized"]
    ),
    rtf_column_header=rtf.RTFColumnHeader(
        text=["", "Placebo\nn (%)", "Xanomeline Low Dose\nn (%)", "Xanomeline High Dose\nn (%)"],
        col_rel_width=[4, 2, 2, 2],
        text_justification=["l", "c", "c", "c"],
    ),
    rtf_body=rtf.RTFBody(
        col_rel_width=[4, 2, 2, 2],
        text_justification=["l", "c", "c", "c"],
    ),
    rtf_source=rtf.RTFSource(text=["Source: ADSL dataset"])
)

doc_overview.write_rtf("rtf/tlf_population.rtf")
```

```{python}
#| echo: false
# Convert RTF to PDF
from rtflite import LibreOfficeConverter
converter = LibreOfficeConverter()
converter.convert("rtf/tlf_population.rtf", output_dir="pdf/", format="pdf", overwrite=True)
```

<embed src="pdf/tlf_population.pdf" style="width:100%; height:600px" type="application/pdf">