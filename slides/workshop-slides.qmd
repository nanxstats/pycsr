---
title: "Python for Clinical Study Reports and Submission"
subtitle: "R / Pharma Workshop 2025"
author: "Yilong Zhang, Nan Xiao"
date: "Novermber 2025"
format: 
    revealjs:
        embed-resources: true
---

# Welcome

## Outline

In this workshop, we have four parts:

1. **Python environment setup (Nan)**: Use `uv` to create and manage reproducible Python projects. Develop and collaborate in GitHub Codespaces, Visual Studio Code, or Positron.
2. **Python packages for clinical reporting (Yilong)**: A guided tour of essential packages such as `polars`, `plotnine`, and `rtflite`, with demonstrations of creating TLFs commonly used in clinical trials.
3. **Manage a clinical trial A&R project (Yilong)**: Practical project structure, conventions, and execution from data to deliverables.
4. **Preparing eCTD submission packages (Nan)**: An example workflow for assembling submission-ready source code and outputs using `py-pkglite`, aligned with eCTD requirements.

## Disclaimer

- The views and opinions expressed in this presentation are those of the individual presenters and do not necessarily represent those of their affiliated organizations or institutions.

- Some slides need to be scrolled down to see the full content.

## Training objective

- With Python, learning how to
    - create tables for clinical study reports.
    - organize a clinical development project.
    - prepare eCTD submission package to FDA.

> The toolchain, process, and formats may be different in different organizations.
> We only provide a recommended way to address them.

> Interested in R? check <https://r4csr.org/> 

## Acknowledgement

- R / Pharma organizers
  + It is a fun and productive annual gathering.
  + Please consider sharing stories and use cases to expand the community.

- Team members from Meta and Merck & Co.

- Contributors of pycsr and r4csr training materials.
  - Please consider submitting issues or PR in the repo.

## Preparation

In this workshop, we assume you have
basic Python programming experience and clinical development knowledge.

- Data manipulation: polars, plotnine, rtflite.
- ADaM data: `adsl`, `adae` etc.

## Resource

- Training Material: <https://pycsr.org/>

- During the workshop, we will use `pycsr` project.
  - Project link will be shared in chat
  - Post questions in group chat.

## Philosophy

We share the same philosophy described in
[Section 1.1 of the R Packages book](https://r-pkgs.org/introduction.html#intro-phil) and quote here.

- "Anything that can be automated, should be automated."
- "Do as little as possible by hand. Do as much as possible with functions."
- "The goal is to spend your time thinking about what you want to do
rather than thinking about the minutiae of package structure."

# Delivering TLFs in CSR

## ICH E3 guidance

The [ICH E3: structure and content of clinical study reports](https://database.ich.org/sites/default/files/E3_Guideline.pdf) provide guidance to assist sponsors in the development of a CSR.

In a CSR, most of TLFs are located in

- Section 10: Study patients
- Section 11: Efficacy evaluation
- Section 12: Safety evaluation
- Section 14: Tables, Figures and Graphs referred to but not included in the text
- Section 16: Appendices

## Datasets

- Public available CDISC pilot [study data located at CDISC GitHub repository](https://github.com/cdisc-org/sdtm-adam-pilot-project/tree/master/updated-pilot-submission-package/900172/m5/datasets/cdiscpilot01/analysis/adam/datasets).

- The dataset structure follows the [CDISC Analysis Data Model (ADaM)](https://www.cdisc.org/standards/foundational/adam).

- Source data: <https://github.com/elong0527/r4csr/tree/master/data-adam>

## Tools

- polars: a python library for data manipulation similar to dplyr/tidyr R packages.

- rtflite: a python library to create production-ready tables and figures in RTF format similar to r2rtf R package.

# polars introduction 

> TBD 

# rtflite introduction

## Motivation

In the pharmaceutical industry, RTF/Microsoft Word play a central role
in preparing clinical study reports

- [ICH E3 Structure and Content of Clinical Study Reports](https://database.ich.org/sites/default/files/E3_Guideline.pdf)

Different organizations can have different table standards

- E.g., Table layout, Font size, Border type, Footnote, Data source

- rtflite is a Python library to create production-ready tables and figures in RTF format.

rtflite is designed to:

- Provide simple Python classes that map to table elements
  (title, headers, body, footnotes) for intuitive table construction.
- Offer a canonical Python API with a clear, composable interface.
- Focus exclusively on **table formatting and layout**,
  leaving data manipulation to dataframe libraries like polars or pandas.
- Minimize external dependencies for maximum portability and reliability.

## Workflow

Before creating an RTF table, we need to:

- Figure out table layout.

- Split the layout into small tasks in the form of a computer program.

- Execute the program.

## Minimal example

> TBD

## Package overview

rtflite package provides the flexibility to customize table appearance for

- **Table component**: title, column header, footnote, etc.
- **Table cell style**: size, border type, color, font size, text color, alignment, etc.
- **Flexible control**: the specification of the cell style can be row or column vectorized.
- **Complicated format**: pagination, section grouping, multiple table concatenations, etc.

rtflite package also provides the flexibility to convert figures in RTF format.

## Simple example: adverse events

rtflite only focus on **table format**.
Data manipulation and analysis should be handled by other python libraries.

## Function summary

rtflite provides simple simple Python classes that map to table elements.
  The goal is to help you translate data frame to tables in RTF file.

> add code example

## Function illustration

> add figure 

# Break and/or exercise (5 min)

# CSR examples

## Disposition table

<https://pycsr.org/tlf-disposition.html>

## Analysis population

<https://pycsr.org/tlf-population.html>

## Baseline characteristics

<https://pycsr.org/tlf-baseline.html>

## Efficacy table

<https://pycsr.org/tlf-efficacy-ancova.html>

## AE Summary table

<https://pycsr.org/tlf-ae-summary.html>

## Specific AE table

<https://pycsr.org/tlf-ae-specific.html>

# Break (5 min)

# Clinical trial project

## Overview

In a late-stage clinical trial, the number of A&R deliverables can easily be in the hundreds.

For an organization, it is also common to have multiple ongoing clinical trials in a clinical program.

In this part, let's consider how to organize a clinical trial project as an A&R lead.

## Folder structure

Our primary focus is creating a standard Python folder structure to organize the
project, with 4 goals in mind:

- Consistency
- Reproducibility
- Automation
- Compliance

> add a folder

## Project management

- Setting up for success
  - Teamwork
  - Architecture
  - Boundaries
  - Community

- The SDLC
  - Planning
  - Development
  - Validation
  - Operation

> add link

# Break (5 min)

# eCTD submission

## Overview

> add a link

## Submission package

We will discuss strategies to prepare proprietary Python project and analysis code
into proper formats for submission:

- The whole game
- Practical considerations
- Prepare submission package using `py-pkglite`
- Prepare analysis programs
- Update ADRG and ARM

> add a link

# pkglite

> To be updated. 

## pkglite: compact package representations

- To provide a **tool** for packing and restoring R packages as plaintext
assets that are easy to store, transfer, and review.
- To provide a **grammar** for specifying the file packing scope that is
functional, precise, and extendable.
- To provide a **standard** for exchanging the packed asset that is
unambiguous, human-friendly, and machine-readable.

## Pipe-friendly workflow

```{r, eval=FALSE, echo=TRUE}
library("pkglite")

"/path/to/pkg/" %>%
  collate(file_ectd()) %>%
  pack()

pack(
  "/path/to/pkg1/" %>% collate(file_ectd()),
  "/path/to/pkg2/" %>% collate(file_ectd()),
  output = "/path/to/pkglite.txt"
)

"/path/to/pkglite.txt" %>%
  unpack(output = "/path/to/output/")
```

## File specifications + file collections

File specifications offer flexibility and brevity in specifying the files to include.

| File specification type | Functions                                                                           |
|-------------------------|-------------------------------------------------------------------------------------|
| Manual discovery        | `file_spec()`                                                                       |
| Automatic discovery     | `file_auto()`                                                                       |
| Common patterns         | `file_root_core()`, `file_r()`, `file_man()`, `file_src()`, `file_vignettes()`, ... |
| Default sets            | `file_default()`, `file_ectd()`                                                     |

<br>

File collections contain the evaluation results of file specifications for packing.

```{r, eval=FALSE, echo=TRUE}
library("pkglite")

"/path/to/pkg" %>%
  collate(file_root_core(), file_r(), file_auto("inst/"))
```

## pkglite.txt

pkglite.txt follows the standard Debian Control File (DCF) format used by
Debian, R, and RStudio IDE, to be both machine-readable and human-readable.

```text
# Generated by pkglite: do not edit by hand
# Use pkglite::unpack() to restore the packages

Package: pkg1
File: DESCRIPTION
Format: text
Content:
  Package: pkg1
  Type: Package
  Title: Example Package One
  Version: 0.1.0
```

# Q&A