[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python for Clinical Study Reports and Submission",
    "section": "",
    "text": "Preface\nThis is a Quarto book.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from Markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\nimport polars as pl\nfrom datetime import datetime\n\ndf = pl.DataFrame(\n    {\n        \"integer\": [1, 2, 3],\n        \"date\": [\n            datetime(2025, 1, 1),\n            datetime(2025, 1, 2),\n            datetime(2025, 1, 3),\n        ],\n        \"float\": [4.0, 5.0, 6.0],\n        \"string\": [\"a\", \"b\", \"c\"],\n    }\n)\n\nprint(df)\n\nshape: (3, 4)\n┌─────────┬─────────────────────┬───────┬────────┐\n│ integer ┆ date                ┆ float ┆ string │\n│ ---     ┆ ---                 ┆ ---   ┆ ---    │\n│ i64     ┆ datetime[μs]        ┆ f64   ┆ str    │\n╞═════════╪═════════════════════╪═══════╪════════╡\n│ 1       ┆ 2025-01-01 00:00:00 ┆ 4.0   ┆ a      │\n│ 2       ┆ 2025-01-02 00:00:00 ┆ 5.0   ┆ b      │\n│ 3       ┆ 2025-01-03 00:00:00 ┆ 6.0   ┆ c      │\n└─────────┴─────────────────────┴───────┴────────┘\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "tlf-disposition.html",
    "href": "tlf-disposition.html",
    "title": "2  Disposition of Participants Table",
    "section": "",
    "text": "2.1 Overview\nClinical trials needs to track how participants flow through a study from enrollment to completion. Following ICH E3 guidance, regulatory submissions require a disposition table in Section 10.1 that summarizes:\nThis tutorial shows you how to create a regulatory-compliant disposition table using Python’s rtflite package.\nimport polars as pl # Manipulate data\nimport rtflite as rtf # Reporting in RTF format",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Disposition of Participants Table</span>"
    ]
  },
  {
    "objectID": "tlf-disposition.html#overview",
    "href": "tlf-disposition.html#overview",
    "title": "2  Disposition of Participants Table",
    "section": "",
    "text": "Enrolled: Total participants who entered the study\nCompleted: Participants who finished the study protocol\nDiscontinued: Participants who left early and their reasons",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Disposition of Participants Table</span>"
    ]
  },
  {
    "objectID": "tlf-disposition.html#step-1-load-data",
    "href": "tlf-disposition.html#step-1-load-data",
    "title": "2  Disposition of Participants Table",
    "section": "2.2 Step 1: Load Data",
    "text": "2.2 Step 1: Load Data\nWe start by loading the Subject-level Analysis Dataset (ADSL), which contains all participant information needed for our disposition table.\nThe ADSL dataset stores participant-level information including treatment assignments and study completion status. We’re using the parquet format for data storage.\n\nadsl = pl.read_parquet(\"data/adsl.parquet\")\n\nLet’s examine the key variables we’ll use to build our disposition table:\n\nUSUBJID: Unique identifier for each participant\nTRT01P: Treatment name (text)\nTRT01PN: Treatment group (numeric code)\nDISCONFL: Flag indicating if participant discontinued (Y/N)\nDCREASCD: Specific reason for discontinuation\n\n\nadsl.select([\"USUBJID\", \"TRT01P\", \"TRT01PN\", \"DISCONFL\", \"DCREASCD\"])\n\n\nshape: (254, 5)\n\n\n\nUSUBJID\nTRT01P\nTRT01PN\nDISCONFL\nDCREASCD\n\n\nstr\nstr\ni64\nstr\nstr\n\n\n\n\n\"01-701-1015\"\n\"Placebo\"\n0\n\"\"\n\"Completed\"\n\n\n\"01-701-1023\"\n\"Placebo\"\n0\n\"Y\"\n\"Adverse Event\"\n\n\n\"01-701-1028\"\n\"Xanomeline High Dose\"\n81\n\"\"\n\"Completed\"\n\n\n\"01-701-1033\"\n\"Xanomeline Low Dose\"\n54\n\"Y\"\n\"Sponsor Decision\"\n\n\n\"01-701-1034\"\n\"Xanomeline High Dose\"\n81\n\"\"\n\"Completed\"\n\n\n…\n…\n…\n…\n…\n\n\n\"01-718-1254\"\n\"Xanomeline Low Dose\"\n54\n\"\"\n\"Completed\"\n\n\n\"01-718-1328\"\n\"Xanomeline High Dose\"\n81\n\"Y\"\n\"Withdrew Consent\"\n\n\n\"01-718-1355\"\n\"Placebo\"\n0\n\"\"\n\"Completed\"\n\n\n\"01-718-1371\"\n\"Xanomeline High Dose\"\n81\n\"Y\"\n\"Adverse Event\"\n\n\n\"01-718-1427\"\n\"Xanomeline High Dose\"\n81\n\"Y\"\n\"Lack of Efficacy\"",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Disposition of Participants Table</span>"
    ]
  },
  {
    "objectID": "tlf-disposition.html#step-2-count-total-participants",
    "href": "tlf-disposition.html#step-2-count-total-participants",
    "title": "2  Disposition of Participants Table",
    "section": "2.3 Step 2: Count Total Participants",
    "text": "2.3 Step 2: Count Total Participants\nFirst, we count how many participants were enrolled in each treatment group.\nWe group participants by treatment arm and count them using .group_by() and .agg(). The .pivot() operation reshapes our data from long format (rows for each treatment) to wide format (columns for each treatment), which matches the standard disposition table layout.\n\nn_rand = (\n    adsl\n    .group_by(\"TRT01PN\")\n    .agg(n = pl.len())\n    .with_columns([\n        pl.lit(\"Participants in population\").alias(\"row\"),\n        pl.lit(None, dtype=pl.Float64).alias(\"pct\") # Placeholder for percentage (not applicable for totals)\n    ])\n    .pivot(\n        index=\"row\",\n        on=\"TRT01PN\",\n        values=[\"n\", \"pct\"],\n        sort_columns=True\n    )\n)\n\nn_rand\n\n\nshape: (1, 7)\n\n\n\nrow\nn_0\nn_54\nn_81\npct_0\npct_54\npct_81\n\n\nstr\nu32\nu32\nu32\nf64\nf64\nf64\n\n\n\n\n\"Participants in population\"\n86\n84\n84\nnull\nnull\nnull",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Disposition of Participants Table</span>"
    ]
  },
  {
    "objectID": "tlf-disposition.html#step-3-count-completed-participants",
    "href": "tlf-disposition.html#step-3-count-completed-participants",
    "title": "2  Disposition of Participants Table",
    "section": "2.4 Step 3: Count Completed Participants",
    "text": "2.4 Step 3: Count Completed Participants\nNext, we identify participants who successfully completed the study and calculate what percentage they represent of each treatment group.\nWe filter for participants where DCREASCD == \"Completed\", then calculate both counts and percentages. The .join() operation brings in the total count for each treatment group so we can compute percentages.\n\nn_complete = (\n    adsl\n    .filter(pl.col(\"DCREASCD\") == \"Completed\")\n    .group_by(\"TRT01PN\")\n    .agg(n = pl.len())\n    .join(\n        adsl.group_by(\"TRT01PN\").agg(total = pl.len()),\n        on=\"TRT01PN\"\n    )\n    .with_columns([\n        pl.lit(\"Completed\").alias(\"row\"),\n        (100.0 * pl.col(\"n\") / pl.col(\"total\")).round(1).alias(\"pct\")\n    ])\n    .pivot(\n        index=\"row\",\n        on=\"TRT01PN\",\n        values=[\"n\", \"pct\"],\n        sort_columns=True\n    )\n)\n\nn_complete\n\n\nshape: (1, 7)\n\n\n\nrow\nn_0\nn_54\nn_81\npct_0\npct_54\npct_81\n\n\nstr\nu32\nu32\nu32\nf64\nf64\nf64\n\n\n\n\n\"Completed\"\n58\n25\n27\n67.4\n29.8\n32.1",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Disposition of Participants Table</span>"
    ]
  },
  {
    "objectID": "tlf-disposition.html#step-4-count-discontinued-participants",
    "href": "tlf-disposition.html#step-4-count-discontinued-participants",
    "title": "2  Disposition of Participants Table",
    "section": "2.5 Step 4: Count Discontinued Participants",
    "text": "2.5 Step 4: Count Discontinued Participants\nNow we count participants who left the study early, regardless of their specific reason.\nWe filter for participants where the discontinuation flag DISCONFL == \"Y\", then follow the same pattern of counting and calculating percentages within each treatment group.\n\nn_disc = (\n    adsl\n    .filter(pl.col(\"DISCONFL\") == \"Y\")\n    .group_by(\"TRT01PN\")\n    .agg(n = pl.len())\n    .join(\n        adsl.group_by(\"TRT01PN\").agg(total = pl.len()),\n        on=\"TRT01PN\"\n    )\n    .with_columns([\n        pl.lit(\"Discontinued\").alias(\"row\"),\n        (100.0 * pl.col(\"n\") / pl.col(\"total\")).round(1).alias(\"pct\")\n    ])\n    .pivot(\n        index=\"row\",\n        on=\"TRT01PN\",\n        values=[\"n\", \"pct\"],\n        sort_columns=True\n    )\n)\n\nn_disc\n\n\nshape: (1, 7)\n\n\n\nrow\nn_0\nn_54\nn_81\npct_0\npct_54\npct_81\n\n\nstr\nu32\nu32\nu32\nf64\nf64\nf64\n\n\n\n\n\"Discontinued\"\n28\n59\n57\n32.6\n70.2\n67.9",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Disposition of Participants Table</span>"
    ]
  },
  {
    "objectID": "tlf-disposition.html#step-5-break-down-discontinuation-reasons",
    "href": "tlf-disposition.html#step-5-break-down-discontinuation-reasons",
    "title": "2  Disposition of Participants Table",
    "section": "2.6 Step 5: Break Down Discontinuation Reasons",
    "text": "2.6 Step 5: Break Down Discontinuation Reasons\nFor regulatory reporting, we need to show the specific reasons why participants discontinued.\nWe filter out completed participants, then group by both treatment and discontinuation reason. The indentation (four spaces) in the row labels helps show these are subcategories under “Discontinued”. We also use .fill_null(0) to handle cases where certain discontinuation reasons don’t occur in all treatment groups.\n\nn_reason = (\n    adsl\n    .filter(pl.col(\"DCREASCD\") != \"Completed\")\n    .group_by([\"TRT01PN\", \"DCREASCD\"])\n    .agg(n = pl.len())\n    .join(\n        adsl.group_by(\"TRT01PN\").agg(total = pl.len()),\n        on=\"TRT01PN\"\n    )\n    .with_columns([\n        pl.concat_str([pl.lit(\"    \"), pl.col(\"DCREASCD\")]).alias(\"row\"),\n        (100.0 * pl.col(\"n\") / pl.col(\"total\")).round(1).alias(\"pct\")\n    ])\n    .pivot(\n        index=\"row\",\n        on=\"TRT01PN\",\n        values=[\"n\", \"pct\"],\n        sort_columns=True\n    )\n    .with_columns([\n        pl.col([\"n_0\", \"n_54\", \"n_81\"]).fill_null(0),\n        pl.col([\"pct_0\", \"pct_54\", \"pct_81\"]).fill_null(0.0)\n    ])\n    .sort(\"row\")\n)\n\nn_reason\n\n\nshape: (9, 7)\n\n\n\nrow\nn_0\nn_54\nn_81\npct_0\npct_54\npct_81\n\n\nstr\nu32\nu32\nu32\nf64\nf64\nf64\n\n\n\n\n\"    Adverse Event\"\n8\n44\n40\n9.3\n52.4\n47.6\n\n\n\"    Death\"\n2\n1\n0\n2.3\n1.2\n0.0\n\n\n\"    I/E Not Met\"\n1\n0\n2\n1.2\n0.0\n2.4\n\n\n\"    Lack of Efficacy\"\n3\n0\n1\n3.5\n0.0\n1.2\n\n\n\"    Lost to Follow-up\"\n1\n1\n0\n1.2\n1.2\n0.0\n\n\n\"    Physician Decision\"\n1\n0\n2\n1.2\n0.0\n2.4\n\n\n\"    Protocol Violation\"\n1\n1\n1\n1.2\n1.2\n1.2\n\n\n\"    Sponsor Decision\"\n2\n2\n3\n2.3\n2.4\n3.6\n\n\n\"    Withdrew Consent\"\n9\n10\n8\n10.5\n11.9\n9.5",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Disposition of Participants Table</span>"
    ]
  },
  {
    "objectID": "tlf-disposition.html#step-6-combine-all-results",
    "href": "tlf-disposition.html#step-6-combine-all-results",
    "title": "2  Disposition of Participants Table",
    "section": "2.7 Step 6: Combine All Results",
    "text": "2.7 Step 6: Combine All Results\nNow we stack all our individual summaries together to create the complete disposition table.\nUsing pl.concat(), we combine the enrollment counts, completion counts, discontinuation counts, and detailed discontinuation reasons into a single table that flows logically from top to bottom.\n\ntbl_disp = pl.concat([\n    n_rand,\n    n_complete,\n    n_disc,\n    n_reason\n])\n\ntbl_disp\n\n\nshape: (12, 7)\n\n\n\nrow\nn_0\nn_54\nn_81\npct_0\npct_54\npct_81\n\n\nstr\nu32\nu32\nu32\nf64\nf64\nf64\n\n\n\n\n\"Participants in population\"\n86\n84\n84\nnull\nnull\nnull\n\n\n\"Completed\"\n58\n25\n27\n67.4\n29.8\n32.1\n\n\n\"Discontinued\"\n28\n59\n57\n32.6\n70.2\n67.9\n\n\n\"    Adverse Event\"\n8\n44\n40\n9.3\n52.4\n47.6\n\n\n\"    Death\"\n2\n1\n0\n2.3\n1.2\n0.0\n\n\n…\n…\n…\n…\n…\n…\n…\n\n\n\"    Lost to Follow-up\"\n1\n1\n0\n1.2\n1.2\n0.0\n\n\n\"    Physician Decision\"\n1\n0\n2\n1.2\n0.0\n2.4\n\n\n\"    Protocol Violation\"\n1\n1\n1\n1.2\n1.2\n1.2\n\n\n\"    Sponsor Decision\"\n2\n2\n3\n2.3\n2.4\n3.6\n\n\n\"    Withdrew Consent\"\n9\n10\n8\n10.5\n11.9\n9.5",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Disposition of Participants Table</span>"
    ]
  },
  {
    "objectID": "tlf-disposition.html#step-7-generate-publication-ready-output",
    "href": "tlf-disposition.html#step-7-generate-publication-ready-output",
    "title": "2  Disposition of Participants Table",
    "section": "2.8 Step 7: Generate Publication-Ready Output",
    "text": "2.8 Step 7: Generate Publication-Ready Output\nFinally, we format our table in RTF format using the rtflite package.\nThe RTFDocument class handles the complex formatting required for clinical reports, including proper column headers, borders, and spacing. The resulting RTF file can be directly included in regulatory submissions or converted to PDF for review.\n\ndoc_disp = rtf.RTFDocument(\n    df=tbl_disp.select(\"row\", \"n_0\", \"pct_0\", \"n_54\", \"pct_54\", \"n_81\", \"pct_81\"),\n    rtf_title=rtf.RTFTitle(text=[\"Disposition of Participants\"]),\n    rtf_column_header=[\n        rtf.RTFColumnHeader(\n            text=[\"\", \"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"],\n            col_rel_width=[3] + [2] * 3,\n            text_justification=[\"l\"] + [\"c\"] * 3,\n        ),\n        rtf.RTFColumnHeader(\n            text=[\"\", \"n\", \"(%)\", \"n\", \"(%)\", \"n\", \"(%)\"],\n            col_rel_width=[3] + [1] * 6,\n            text_justification=[\"l\"] + [\"c\"] * 6,\n            border_top=[\"\"] + [\"single\"] * 6,\n            border_left=[\"single\"] + [\"single\", \"\"] * 3\n        )\n    ],\n    rtf_body=rtf.RTFBody(\n        col_rel_width=[3] + [1] * 6,\n        text_justification=[\"l\"] + [\"c\"] * 6,\n        border_left=[\"single\"] + [\"single\", \"\"] * 3\n    ),\n    rtf_source=rtf.RTFSource(text=[\"Source: ADSL dataset\"]) # Required source attribution\n)\n\ndoc_disp.write_rtf(\"rtf/tlf_disposition.rtf\")  # Save as RTF for submission\n\nrtf/tlf_disposition.rtf",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Disposition of Participants Table</span>"
    ]
  },
  {
    "objectID": "tlf-population.html",
    "href": "tlf-population.html",
    "title": "3  Study Population Table",
    "section": "",
    "text": "3.1 Overview\nClinical trials define multiple analysis populations based on different inclusion criteria. Following ICH E3 guidance, regulatory submissions must clearly document the number of participants in each analysis population to support the validity of statistical analyses.\nThe key analysis populations typically include:\nThis tutorial shows you how to create a population summary table using Python’s rtflite package.\nimport polars as pl # Data manipulation\nimport rtflite as rtf # RTF reporting",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Study Population Table</span>"
    ]
  },
  {
    "objectID": "tlf-population.html#overview",
    "href": "tlf-population.html#overview",
    "title": "3  Study Population Table",
    "section": "",
    "text": "All Randomized: Total participants who entered the study\nIntent-to-Treat (ITT): Participants included in the primary efficacy analysis\nEfficacy Population: Participants who meet specific criteria for efficacy evaluation\nSafety Population: Participants who received at least one dose of study treatment",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Study Population Table</span>"
    ]
  },
  {
    "objectID": "tlf-population.html#step-1-load-data",
    "href": "tlf-population.html#step-1-load-data",
    "title": "3  Study Population Table",
    "section": "3.2 Step 1: Load Data",
    "text": "3.2 Step 1: Load Data\nWe start by loading the Subject-level Analysis Dataset (ADSL), which contains population flags for each participant.\n\nadsl = pl.read_parquet(\"data/adsl.parquet\")\n\nLet’s examine the key population flag variables we’ll use:\n\nUSUBJID: Unique participant identifier\nTRT01P: Planned treatment group\nITTFL: Intent-to-treat population flag (Y/N)\nEFFFL: Efficacy population flag (Y/N)\nSAFFL: Safety population flag (Y/N)\n\n\nadsl.select([\"USUBJID\", \"TRT01P\", \"ITTFL\", \"EFFFL\", \"SAFFL\"])\n\n\nshape: (254, 5)\n\n\n\nUSUBJID\nTRT01P\nITTFL\nEFFFL\nSAFFL\n\n\nstr\nstr\nstr\nstr\nstr\n\n\n\n\n\"01-701-1015\"\n\"Placebo\"\n\"Y\"\n\"Y\"\n\"Y\"\n\n\n\"01-701-1023\"\n\"Placebo\"\n\"Y\"\n\"Y\"\n\"Y\"\n\n\n\"01-701-1028\"\n\"Xanomeline High Dose\"\n\"Y\"\n\"Y\"\n\"Y\"\n\n\n\"01-701-1033\"\n\"Xanomeline Low Dose\"\n\"Y\"\n\"Y\"\n\"Y\"\n\n\n\"01-701-1034\"\n\"Xanomeline High Dose\"\n\"Y\"\n\"Y\"\n\"Y\"\n\n\n…\n…\n…\n…\n…\n\n\n\"01-718-1254\"\n\"Xanomeline Low Dose\"\n\"Y\"\n\"Y\"\n\"Y\"\n\n\n\"01-718-1328\"\n\"Xanomeline High Dose\"\n\"Y\"\n\"Y\"\n\"Y\"\n\n\n\"01-718-1355\"\n\"Placebo\"\n\"Y\"\n\"Y\"\n\"Y\"\n\n\n\"01-718-1371\"\n\"Xanomeline High Dose\"\n\"Y\"\n\"Y\"\n\"Y\"\n\n\n\"01-718-1427\"\n\"Xanomeline High Dose\"\n\"Y\"\n\"Y\"\n\"Y\"",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Study Population Table</span>"
    ]
  },
  {
    "objectID": "tlf-population.html#step-2-calculate-treatment-group-totals",
    "href": "tlf-population.html#step-2-calculate-treatment-group-totals",
    "title": "3  Study Population Table",
    "section": "3.3 Step 2: Calculate Treatment Group Totals",
    "text": "3.3 Step 2: Calculate Treatment Group Totals\nFirst, we calculate the total number of randomized participants in each treatment group, which will serve as the denominator for percentage calculations.\n\ntotals = adsl.group_by(\"TRT01P\").agg(\n    total = pl.len()\n)\n\ntotals\n\n\nshape: (3, 2)\n\n\n\nTRT01P\ntotal\n\n\nstr\nu32\n\n\n\n\n\"Xanomeline Low Dose\"\n84\n\n\n\"Placebo\"\n86\n\n\n\"Xanomeline High Dose\"\n84",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Study Population Table</span>"
    ]
  },
  {
    "objectID": "tlf-population.html#step-3-define-helper-function",
    "href": "tlf-population.html#step-3-define-helper-function",
    "title": "3  Study Population Table",
    "section": "3.4 Step 3: Define Helper Function",
    "text": "3.4 Step 3: Define Helper Function\nWe create a reusable function to count participants by treatment group for any population subset.\n\ndef count_by_treatment(data, population_name):\n    \"\"\"Count participants by treatment group and add population label\"\"\"\n    return data.group_by(\"TRT01P\").agg(\n        n = pl.len()\n    ).with_columns(\n        population = pl.lit(population_name)\n    )",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Study Population Table</span>"
    ]
  },
  {
    "objectID": "tlf-population.html#step-4-count-each-population",
    "href": "tlf-population.html#step-4-count-each-population",
    "title": "3  Study Population Table",
    "section": "3.5 Step 4: Count Each Population",
    "text": "3.5 Step 4: Count Each Population\nNow we calculate participant counts for each analysis population.\n\n3.5.1 All Randomized Participants\n\npop_all = count_by_treatment(\n    data=adsl,\n    population_name=\"Participants in population\"\n)\n\npop_all\n\n\nshape: (3, 3)\n\n\n\nTRT01P\nn\npopulation\n\n\nstr\nu32\nstr\n\n\n\n\n\"Xanomeline Low Dose\"\n84\n\"Participants in population\"\n\n\n\"Placebo\"\n86\n\"Participants in population\"\n\n\n\"Xanomeline High Dose\"\n84\n\"Participants in population\"\n\n\n\n\n\n\n\n\n3.5.2 Intent-to-Treat Population\n\nadsl_itt = adsl.filter(pl.col(\"ITTFL\") == \"Y\")\npop_itt = count_by_treatment(\n    data=adsl_itt,\n    population_name=\"Participants included in ITT population\"\n)\n\npop_itt\n\n\nshape: (3, 3)\n\n\n\nTRT01P\nn\npopulation\n\n\nstr\nu32\nstr\n\n\n\n\n\"Placebo\"\n86\n\"Participants included in ITT p…\n\n\n\"Xanomeline High Dose\"\n84\n\"Participants included in ITT p…\n\n\n\"Xanomeline Low Dose\"\n84\n\"Participants included in ITT p…\n\n\n\n\n\n\n\n\n3.5.3 Efficacy Population\n\nadsl_eff = adsl.filter(pl.col(\"EFFFL\") == \"Y\")\npop_eff = count_by_treatment(\n    data=adsl_eff,\n    population_name=\"Participants included in efficacy population\"\n)\n\npop_eff\n\n\nshape: (3, 3)\n\n\n\nTRT01P\nn\npopulation\n\n\nstr\nu32\nstr\n\n\n\n\n\"Xanomeline High Dose\"\n74\n\"Participants included in effic…\n\n\n\"Xanomeline Low Dose\"\n81\n\"Participants included in effic…\n\n\n\"Placebo\"\n79\n\"Participants included in effic…\n\n\n\n\n\n\n\n\n3.5.4 Safety Population\n\nadsl_saf = adsl.filter(pl.col(\"SAFFL\") == \"Y\")\npop_saf = count_by_treatment(\n    data=adsl_saf,\n    population_name=\"Participants included in safety population\"\n)\n\npop_saf\n\n\nshape: (3, 3)\n\n\n\nTRT01P\nn\npopulation\n\n\nstr\nu32\nstr\n\n\n\n\n\"Xanomeline Low Dose\"\n84\n\"Participants included in safet…\n\n\n\"Xanomeline High Dose\"\n84\n\"Participants included in safet…\n\n\n\"Placebo\"\n86\n\"Participants included in safet…",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Study Population Table</span>"
    ]
  },
  {
    "objectID": "tlf-population.html#step-5-combine-all-populations",
    "href": "tlf-population.html#step-5-combine-all-populations",
    "title": "3  Study Population Table",
    "section": "3.6 Step 5: Combine All Populations",
    "text": "3.6 Step 5: Combine All Populations\nWe stack all population counts together into a single dataset.\n\nall_populations = pl.concat([\n    pop_all,\n    pop_itt,\n    pop_eff,\n    pop_saf\n])\n\nall_populations\n\n\nshape: (12, 3)\n\n\n\nTRT01P\nn\npopulation\n\n\nstr\nu32\nstr\n\n\n\n\n\"Xanomeline Low Dose\"\n84\n\"Participants in population\"\n\n\n\"Placebo\"\n86\n\"Participants in population\"\n\n\n\"Xanomeline High Dose\"\n84\n\"Participants in population\"\n\n\n\"Placebo\"\n86\n\"Participants included in ITT p…\n\n\n\"Xanomeline High Dose\"\n84\n\"Participants included in ITT p…\n\n\n…\n…\n…\n\n\n\"Xanomeline Low Dose\"\n81\n\"Participants included in effic…\n\n\n\"Placebo\"\n79\n\"Participants included in effic…\n\n\n\"Xanomeline Low Dose\"\n84\n\"Participants included in safet…\n\n\n\"Xanomeline High Dose\"\n84\n\"Participants included in safet…\n\n\n\"Placebo\"\n86\n\"Participants included in safet…",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Study Population Table</span>"
    ]
  },
  {
    "objectID": "tlf-population.html#step-6-calculate-percentages",
    "href": "tlf-population.html#step-6-calculate-percentages",
    "title": "3  Study Population Table",
    "section": "3.7 Step 6: Calculate Percentages",
    "text": "3.7 Step 6: Calculate Percentages\nWe join with the total counts and calculate what percentage each population represents of the total randomized participants.\n\nstats_with_pct = all_populations.join(\n    totals,\n    on=\"TRT01P\"\n).with_columns(\n    pct = (100.0 * pl.col(\"n\") / pl.col(\"total\")).round(1)\n)\n\nstats_with_pct\n\n\nshape: (12, 5)\n\n\n\nTRT01P\nn\npopulation\ntotal\npct\n\n\nstr\nu32\nstr\nu32\nf64\n\n\n\n\n\"Xanomeline Low Dose\"\n84\n\"Participants in population\"\n84\n100.0\n\n\n\"Placebo\"\n86\n\"Participants in population\"\n86\n100.0\n\n\n\"Xanomeline High Dose\"\n84\n\"Participants in population\"\n84\n100.0\n\n\n\"Placebo\"\n86\n\"Participants included in ITT p…\n86\n100.0\n\n\n\"Xanomeline High Dose\"\n84\n\"Participants included in ITT p…\n84\n100.0\n\n\n…\n…\n…\n…\n…\n\n\n\"Xanomeline Low Dose\"\n81\n\"Participants included in effic…\n84\n96.4\n\n\n\"Placebo\"\n79\n\"Participants included in effic…\n86\n91.9\n\n\n\"Xanomeline Low Dose\"\n84\n\"Participants included in safet…\n84\n100.0\n\n\n\"Xanomeline High Dose\"\n84\n\"Participants included in safet…\n84\n100.0\n\n\n\"Placebo\"\n86\n\"Participants included in safet…\n86\n100.0",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Study Population Table</span>"
    ]
  },
  {
    "objectID": "tlf-population.html#step-7-format-display-values",
    "href": "tlf-population.html#step-7-format-display-values",
    "title": "3  Study Population Table",
    "section": "3.8 Step 7: Format Display Values",
    "text": "3.8 Step 7: Format Display Values\nFor the final table, we format the display text. The total randomized count shows just “N”, while subset populations show “N (%)”.\n\nformatted_stats = stats_with_pct.with_columns(\n    display = pl.when(pl.col(\"population\") == \"Participants in population\")\n        .then(pl.col(\"n\").cast(str)) \n        .otherwise(\n            pl.concat_str([ \n                pl.col(\"n\").cast(str),\n                pl.lit(\" (\"),\n                pl.col(\"pct\").round(1).cast(str),\n                pl.lit(\")\")\n            ])\n        )\n)\n\nformatted_stats\n\n\nshape: (12, 6)\n\n\n\nTRT01P\nn\npopulation\ntotal\npct\ndisplay\n\n\nstr\nu32\nstr\nu32\nf64\nstr\n\n\n\n\n\"Xanomeline Low Dose\"\n84\n\"Participants in population\"\n84\n100.0\n\"84\"\n\n\n\"Placebo\"\n86\n\"Participants in population\"\n86\n100.0\n\"86\"\n\n\n\"Xanomeline High Dose\"\n84\n\"Participants in population\"\n84\n100.0\n\"84\"\n\n\n\"Placebo\"\n86\n\"Participants included in ITT p…\n86\n100.0\n\"86 (100.0)\"\n\n\n\"Xanomeline High Dose\"\n84\n\"Participants included in ITT p…\n84\n100.0\n\"84 (100.0)\"\n\n\n…\n…\n…\n…\n…\n…\n\n\n\"Xanomeline Low Dose\"\n81\n\"Participants included in effic…\n84\n96.4\n\"81 (96.4)\"\n\n\n\"Placebo\"\n79\n\"Participants included in effic…\n86\n91.9\n\"79 (91.9)\"\n\n\n\"Xanomeline Low Dose\"\n84\n\"Participants included in safet…\n84\n100.0\n\"84 (100.0)\"\n\n\n\"Xanomeline High Dose\"\n84\n\"Participants included in safet…\n84\n100.0\n\"84 (100.0)\"\n\n\n\"Placebo\"\n86\n\"Participants included in safet…\n86\n100.0\n\"86 (100.0)\"",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Study Population Table</span>"
    ]
  },
  {
    "objectID": "tlf-population.html#step-8-create-final-table",
    "href": "tlf-population.html#step-8-create-final-table",
    "title": "3  Study Population Table",
    "section": "3.9 Step 8: Create Final Table",
    "text": "3.9 Step 8: Create Final Table\nWe reshape the data from long format (rows for each treatment-population combination) to wide format (columns for each treatment group).\n\ndf_overview = formatted_stats.pivot(\n    values=\"display\",\n    index=\"population\",\n    on=\"TRT01P\",\n    maintain_order=True\n).select(\n    [\"population\", \"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"]\n)\n\ndf_overview\n\n\nshape: (4, 4)\n\n\n\npopulation\nPlacebo\nXanomeline Low Dose\nXanomeline High Dose\n\n\nstr\nstr\nstr\nstr\n\n\n\n\n\"Participants in population\"\n\"86\"\n\"84\"\n\"84\"\n\n\n\"Participants included in ITT p…\n\"86 (100.0)\"\n\"84 (100.0)\"\n\"84 (100.0)\"\n\n\n\"Participants included in effic…\n\"79 (91.9)\"\n\"81 (96.4)\"\n\"74 (88.1)\"\n\n\n\"Participants included in safet…\n\"86 (100.0)\"\n\"84 (100.0)\"\n\"84 (100.0)\"",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Study Population Table</span>"
    ]
  },
  {
    "objectID": "tlf-population.html#step-9-generate-publication-ready-output",
    "href": "tlf-population.html#step-9-generate-publication-ready-output",
    "title": "3  Study Population Table",
    "section": "3.10 Step 9: Generate Publication-Ready Output",
    "text": "3.10 Step 9: Generate Publication-Ready Output\nFinally, we format the population table for regulatory submission using the rtflite package.\n\ndoc_overview = rtf.RTFDocument(\n    df=df_overview,\n    rtf_title=rtf.RTFTitle(\n        text=[\"Analysis Population\", \"All Participants Randomized\"]\n    ),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\"\", \"Placebo\\nn (%)\", \"Xanomeline Low Dose\\nn (%)\", \"Xanomeline High Dose\\nn (%)\"],\n        col_rel_width=[4, 2, 2, 2],\n        text_justification=[\"l\", \"c\", \"c\", \"c\"],\n    ),\n    rtf_body=rtf.RTFBody(\n        col_rel_width=[4, 2, 2, 2],\n        text_justification=[\"l\", \"c\", \"c\", \"c\"],\n    ),\n    rtf_source=rtf.RTFSource(text=[\"Source: ADSL dataset\"])\n)\n\ndoc_overview.write_rtf(\"rtf/tlf_population.rtf\")\n\nrtf/tlf_population.rtf",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Study Population Table</span>"
    ]
  },
  {
    "objectID": "tlf-baseline.html",
    "href": "tlf-baseline.html",
    "title": "4  Baseline Characteristics Table",
    "section": "",
    "text": "4.1 Overview\nBaseline characteristics tables summarize the demographic and clinical characteristics of study participants at enrollment. Following ICH E3 guidance, these tables are essential for understanding the study population and assessing comparability between treatment groups.\nThis tutorial shows you how to create a baseline characteristics table using Python’s rtflite package.\nimport polars as pl # Data manipulation\nimport rtflite as rtf # RTF reporting",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Baseline Characteristics Table</span>"
    ]
  },
  {
    "objectID": "tlf-baseline.html#step-1-load-data",
    "href": "tlf-baseline.html#step-1-load-data",
    "title": "4  Baseline Characteristics Table",
    "section": "4.2 Step 1: Load Data",
    "text": "4.2 Step 1: Load Data\nWe start by loading the Subject-level Analysis Dataset (ADSL) and filtering to the safety population.\n\nadsl = (\n    pl.read_parquet(\"data/adsl.parquet\")\n    .select([\"USUBJID\", \"TRT01P\", \"AGE\", \"SEX\", \"RACE\"])\n)\n\nadsl\n\n\nshape: (254, 5)\n\n\n\nUSUBJID\nTRT01P\nAGE\nSEX\nRACE\n\n\nstr\nstr\nf64\nstr\nstr\n\n\n\n\n\"01-701-1015\"\n\"Placebo\"\n63.0\n\"Female\"\n\"White\"\n\n\n\"01-701-1023\"\n\"Placebo\"\n64.0\n\"Male\"\n\"White\"\n\n\n\"01-701-1028\"\n\"Xanomeline High Dose\"\n71.0\n\"Male\"\n\"White\"\n\n\n\"01-701-1033\"\n\"Xanomeline Low Dose\"\n74.0\n\"Male\"\n\"White\"\n\n\n\"01-701-1034\"\n\"Xanomeline High Dose\"\n77.0\n\"Female\"\n\"White\"\n\n\n…\n…\n…\n…\n…\n\n\n\"01-718-1254\"\n\"Xanomeline Low Dose\"\n78.0\n\"Male\"\n\"White\"\n\n\n\"01-718-1328\"\n\"Xanomeline High Dose\"\n86.0\n\"Male\"\n\"White\"\n\n\n\"01-718-1355\"\n\"Placebo\"\n79.0\n\"Male\"\n\"White\"\n\n\n\"01-718-1371\"\n\"Xanomeline High Dose\"\n69.0\n\"Female\"\n\"White\"\n\n\n\"01-718-1427\"\n\"Xanomeline High Dose\"\n74.0\n\"Female\"\n\"Black Or African American\"",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Baseline Characteristics Table</span>"
    ]
  },
  {
    "objectID": "tlf-baseline.html#step-2-calculate-summary-statistics",
    "href": "tlf-baseline.html#step-2-calculate-summary-statistics",
    "title": "4  Baseline Characteristics Table",
    "section": "4.3 Step 2: Calculate Summary Statistics",
    "text": "4.3 Step 2: Calculate Summary Statistics\nWe’ll create separate functions to handle continuous and categorical variables.\n\n4.3.1 Continuous Variables (Age)\nFor continuous variables, we calculate mean (SD) and median [min, max].\n\ndef summarize_continuous(df, var):\n    \"\"\"Calculate summary statistics for continuous variables\"\"\"\n    return df.group_by(\"TRT01P\").agg([\n        pl.col(var).mean().round(1).alias(\"mean\"),\n        pl.col(var).std().round(2).alias(\"sd\"),\n        pl.col(var).median().alias(\"median\"),\n        pl.col(var).min().alias(\"min\"),\n        pl.col(var).max().alias(\"max\"),\n        pl.len().alias(\"n\")\n    ])\n\nage_stats = summarize_continuous(adsl, \"AGE\")\nage_stats\n\n\nshape: (3, 7)\n\n\n\nTRT01P\nmean\nsd\nmedian\nmin\nmax\nn\n\n\nstr\nf64\nf64\nf64\nf64\nf64\nu32\n\n\n\n\n\"Placebo\"\n75.2\n8.59\n76.0\n52.0\n89.0\n86\n\n\n\"Xanomeline Low Dose\"\n75.7\n8.29\n77.5\n51.0\n88.0\n84\n\n\n\"Xanomeline High Dose\"\n74.4\n7.89\n76.0\n56.0\n88.0\n84\n\n\n\n\n\n\n\n\n4.3.2 Categorical Variables (Sex, Race)\nFor categorical variables, we calculate counts and percentages.\n\ndef summarize_categorical(df, var):\n    \"\"\"Calculate counts and percentages for categorical variables\"\"\"\n    # Get counts by treatment and category\n    counts = df.group_by([\"TRT01P\", var]).len()\n\n    # Get treatment totals for percentage calculations\n    totals = df.group_by(\"TRT01P\").len().rename({\"len\": \"total\"})\n\n    # Calculate percentages\n    result = counts.join(totals, on=\"TRT01P\").with_columns([\n        (100.0 * pl.col(\"len\") / pl.col(\"total\")).round(1).alias(\"pct\")\n    ])\n\n    return result\n\nsex_stats = summarize_categorical(adsl, \"SEX\")\nsex_stats\n\n\nshape: (6, 5)\n\n\n\nTRT01P\nSEX\nlen\ntotal\npct\n\n\nstr\nstr\nu32\nu32\nf64\n\n\n\n\n\"Placebo\"\n\"Female\"\n53\n86\n61.6\n\n\n\"Placebo\"\n\"Male\"\n33\n86\n38.4\n\n\n\"Xanomeline Low Dose\"\n\"Male\"\n34\n84\n40.5\n\n\n\"Xanomeline Low Dose\"\n\"Female\"\n50\n84\n59.5\n\n\n\"Xanomeline High Dose\"\n\"Male\"\n44\n84\n52.4\n\n\n\"Xanomeline High Dose\"\n\"Female\"\n40\n84\n47.6\n\n\n\n\n\n\n\nrace_stats = summarize_categorical(adsl, \"RACE\")\nrace_stats\n\n\nshape: (7, 5)\n\n\n\nTRT01P\nRACE\nlen\ntotal\npct\n\n\nstr\nstr\nu32\nu32\nf64\n\n\n\n\n\"Xanomeline Low Dose\"\n\"White\"\n78\n84\n92.9\n\n\n\"Xanomeline Low Dose\"\n\"Black Or African American\"\n6\n84\n7.1\n\n\n\"Placebo\"\n\"White\"\n78\n86\n90.7\n\n\n\"Xanomeline High Dose\"\n\"White\"\n74\n84\n88.1\n\n\n\"Xanomeline High Dose\"\n\"American Indian Or Alaska Nati…\n1\n84\n1.2\n\n\n\"Placebo\"\n\"Black Or African American\"\n8\n86\n9.3\n\n\n\"Xanomeline High Dose\"\n\"Black Or African American\"\n9\n84\n10.7",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Baseline Characteristics Table</span>"
    ]
  },
  {
    "objectID": "tlf-baseline.html#step-3-format-results",
    "href": "tlf-baseline.html#step-3-format-results",
    "title": "4  Baseline Characteristics Table",
    "section": "4.4 Step 3: Format Results",
    "text": "4.4 Step 3: Format Results\nNow we format the statistics into the standard baseline table format.\n\n4.4.1 Format Age Statistics\n\n# Format age as \"Mean (SD)\" and \"Median [Min, Max]\"\nage_formatted = age_stats.with_columns([\n    pl.format(\"{} ({})\", pl.col(\"mean\"), pl.col(\"sd\")).alias(\"mean_sd\"),\n    pl.format(\"{} [{}, {}]\", pl.col(\"median\"), pl.col(\"min\"), pl.col(\"max\")).alias(\"median_range\")\n]).select([\"TRT01P\", \"mean_sd\", \"median_range\"])\n\nage_formatted\n\n\nshape: (3, 3)\n\n\n\nTRT01P\nmean_sd\nmedian_range\n\n\nstr\nstr\nstr\n\n\n\n\n\"Placebo\"\n\"75.2 (8.59)\"\n\"76.0 [52.0, 89.0]\"\n\n\n\"Xanomeline Low Dose\"\n\"75.7 (8.29)\"\n\"77.5 [51.0, 88.0]\"\n\n\n\"Xanomeline High Dose\"\n\"74.4 (7.89)\"\n\"76.0 [56.0, 88.0]\"\n\n\n\n\n\n\n\n\n4.4.2 Format Categorical Statistics\n\n# Format categorical as \"n (%)\"\nsex_formatted = sex_stats.with_columns(\n    pl.format(\"{} ({}%)\", pl.col(\"len\"), pl.col(\"pct\")).alias(\"n_pct\")\n).select([\"TRT01P\", \"SEX\", \"n_pct\"])\n\nrace_formatted = race_stats.with_columns(\n    pl.format(\"{} ({}%)\", pl.col(\"len\"), pl.col(\"pct\")).alias(\"n_pct\")\n).select([\"TRT01P\", \"RACE\", \"n_pct\"])\n\nsex_formatted\n\n\nshape: (6, 3)\n\n\n\nTRT01P\nSEX\nn_pct\n\n\nstr\nstr\nstr\n\n\n\n\n\"Placebo\"\n\"Female\"\n\"53 (61.6%)\"\n\n\n\"Placebo\"\n\"Male\"\n\"33 (38.4%)\"\n\n\n\"Xanomeline Low Dose\"\n\"Male\"\n\"34 (40.5%)\"\n\n\n\"Xanomeline Low Dose\"\n\"Female\"\n\"50 (59.5%)\"\n\n\n\"Xanomeline High Dose\"\n\"Male\"\n\"44 (52.4%)\"\n\n\n\"Xanomeline High Dose\"\n\"Female\"\n\"40 (47.6%)\"",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Baseline Characteristics Table</span>"
    ]
  },
  {
    "objectID": "tlf-baseline.html#step-4-create-table-structure",
    "href": "tlf-baseline.html#step-4-create-table-structure",
    "title": "4  Baseline Characteristics Table",
    "section": "4.5 Step 4: Create Table Structure",
    "text": "4.5 Step 4: Create Table Structure\nWe’ll build the table row by row following the standard baseline table format.\n\n# Helper function to get value for a treatment group\ndef get_value(df, treatment):\n    \"\"\"Get value for a specific treatment group or return default\"\"\"\n    result = df.filter(pl.col(\"TRT01P\") == treatment)\n    return result[result.columns[-1]][0] if result.height &gt; 0 else \"0 (0.0%)\"\n\n# Build the baseline table structure\ntable_rows = []\n\n# Age section\ntable_rows.append([\"Age (years)\", \"\", \"\", \"\"])\n\n# Age Mean (SD) row\nage_mean_row = [\"  Mean (SD)\"] + [\n    get_value(age_formatted.select([\"TRT01P\", \"mean_sd\"]), trt).replace(\"0 (0.0%)\", \"\")\n    for trt in [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"]\n]\ntable_rows.append(age_mean_row)\n\n# Age Median [Min, Max] row\nage_median_row = [\"  Median [Min, Max]\"] + [\n    get_value(age_formatted.select([\"TRT01P\", \"median_range\"]), trt).replace(\"0 (0.0%)\", \"\")\n    for trt in [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"]\n]\ntable_rows.append(age_median_row)\n\n# Sex section\ntable_rows.append([\"Sex\", \"\", \"\", \"\"])\n\nfor sex_cat in [\"Female\", \"Male\"]:\n    sex_data = sex_formatted.filter(pl.col(\"SEX\") == sex_cat)\n    sex_row = [f\"  {sex_cat}\"] + [\n        get_value(sex_data, trt)\n        for trt in [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"]\n    ]\n    table_rows.append(sex_row)\n\n# Race section\ntable_rows.append([\"Race\", \"\", \"\", \"\"])\n\nfor race_cat in [\"White\", \"Black Or African American\", \"American Indian Or Alaska Native\"]:\n    race_data = race_formatted.filter(pl.col(\"RACE\") == race_cat)\n    race_row = [f\"  {race_cat}\"] + [\n        get_value(race_data, trt)\n        for trt in [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"]\n    ]\n    table_rows.append(race_row)\n\n# Create DataFrame from table rows\nbaseline_table = pl.DataFrame(\n    table_rows,\n    schema=[\"Characteristic\", \"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"],\n    orient=\"row\"\n)\n\nbaseline_table\n\n\nshape: (10, 4)\n\n\n\nCharacteristic\nPlacebo\nXanomeline Low Dose\nXanomeline High Dose\n\n\nstr\nstr\nstr\nstr\n\n\n\n\n\"Age (years)\"\n\"\"\n\"\"\n\"\"\n\n\n\"  Mean (SD)\"\n\"75.2 (8.59)\"\n\"75.7 (8.29)\"\n\"74.4 (7.89)\"\n\n\n\"  Median [Min, Max]\"\n\"76.0 [52.0, 89.0]\"\n\"77.5 [51.0, 88.0]\"\n\"76.0 [56.0, 88.0]\"\n\n\n\"Sex\"\n\"\"\n\"\"\n\"\"\n\n\n\"  Female\"\n\"53 (61.6%)\"\n\"50 (59.5%)\"\n\"40 (47.6%)\"\n\n\n\"  Male\"\n\"33 (38.4%)\"\n\"34 (40.5%)\"\n\"44 (52.4%)\"\n\n\n\"Race\"\n\"\"\n\"\"\n\"\"\n\n\n\"  White\"\n\"78 (90.7%)\"\n\"78 (92.9%)\"\n\"74 (88.1%)\"\n\n\n\"  Black Or African American\"\n\"8 (9.3%)\"\n\"6 (7.1%)\"\n\"9 (10.7%)\"\n\n\n\"  American Indian Or Alaska Na…\n\"0 (0.0%)\"\n\"0 (0.0%)\"\n\"1 (1.2%)\"",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Baseline Characteristics Table</span>"
    ]
  },
  {
    "objectID": "tlf-baseline.html#step-5-generate-publication-ready-output",
    "href": "tlf-baseline.html#step-5-generate-publication-ready-output",
    "title": "4  Baseline Characteristics Table",
    "section": "4.6 Step 5: Generate Publication-Ready Output",
    "text": "4.6 Step 5: Generate Publication-Ready Output\nFinally, we format the baseline table for regulatory submission using the rtflite package.\n\n# Get treatment group sizes for column headers\ntreatment_n = adsl.group_by(\"TRT01P\").len().sort(\"TRT01P\")\nn_placebo = treatment_n.filter(pl.col(\"TRT01P\") == \"Placebo\")[\"len\"][0]\nn_low = treatment_n.filter(pl.col(\"TRT01P\") == \"Xanomeline Low Dose\")[\"len\"][0]\nn_high = treatment_n.filter(pl.col(\"TRT01P\") == \"Xanomeline High Dose\")[\"len\"][0]\n\ndoc_baseline = rtf.RTFDocument(\n    df=baseline_table,\n    rtf_title=rtf.RTFTitle(\n        text=[\n            \"Baseline Characteristics of Participants\", \n            \"(All Participants Randomized)\"\n        ]\n    ),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\n            \"Characteristic\",\n            f\"Placebo\\n(N={n_placebo})\",\n            f\"Xanomeline Low Dose\\n(N={n_low})\",\n            f\"Xanomeline High Dose\\n(N={n_high})\"\n        ],\n        text_justification=[\"l\", \"c\", \"c\", \"c\"],\n        col_rel_width=[3, 2, 2, 2]\n    ),\n    rtf_body=rtf.RTFBody(\n        text_justification=[\"l\", \"c\", \"c\", \"c\"],\n        col_rel_width=[3, 2, 2, 2]\n    ),\n    rtf_source=rtf.RTFSource(text=[\"Source: ADSL dataset\"])\n)\n\ndoc_baseline.write_rtf(\"rtf/tlf_baseline.rtf\") # Save as RTF for submission\n\nrtf/tlf_baseline.rtf",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Baseline Characteristics Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-summary.html",
    "href": "tlf-ae-summary.html",
    "title": "5  Adverse Events Summary Table",
    "section": "",
    "text": "5.1 Overview\nThis article demonstrates how to create an adverse events (AE) summary table for clinical study reports using rtflite.\nAdverse events summary tables are critical safety assessments in clinical trials. They typically show the number and percentage of participants experiencing various categories of adverse events by treatment group.",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Adverse Events Summary Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-summary.html#imports",
    "href": "tlf-ae-summary.html#imports",
    "title": "5  Adverse Events Summary Table",
    "section": "5.2 Imports",
    "text": "5.2 Imports\n\nimport polars as pl\nimport rtflite as rtf",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Adverse Events Summary Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-summary.html#data-preparation",
    "href": "tlf-ae-summary.html#data-preparation",
    "title": "5  Adverse Events Summary Table",
    "section": "5.3 Data Preparation",
    "text": "5.3 Data Preparation\n\n# Load and prepare safety population data\nadsl = pl.read_parquet(\"data/adsl.parquet\")\nadae = pl.read_parquet(\"data/adae.parquet\")\n\n# Safety population \nadsl_safety = adsl.filter(pl.col(\"SAFFL\") == \"Y\").select([\"USUBJID\", \"TRT01A\"])\nadae_safety = adae.join(adsl_safety, on=\"USUBJID\").with_columns(pl.col(\"TRT01A\").alias(\"TRTA\"))",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Adverse Events Summary Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-summary.html#ae-summary-calculations",
    "href": "tlf-ae-summary.html#ae-summary-calculations",
    "title": "5  Adverse Events Summary Table",
    "section": "5.4 AE Summary Calculations",
    "text": "5.4 AE Summary Calculations\n\n# Define AE categories with their filter conditions\nae_categories = {\n    \"Participants in population\": None,  # Special case - uses total N\n    \"With any adverse event\": pl.lit(True),  # All AEs\n    \"With drug-related adverse event\": pl.col(\"AEREL\").is_in([\"POSSIBLE\", \"PROBABLE\", \"DEFINITE\", \"RELATED\"]),\n    \"With serious adverse event\": pl.col(\"AESER\") == \"Y\",\n    \"With serious drug-related adverse event\": (\n        (pl.col(\"AESER\") == \"Y\") & \n        pl.col(\"AEREL\").is_in([\"POSSIBLE\", \"PROBABLE\", \"DEFINITE\", \"RELATED\"])\n    ),\n    \"Who died\": pl.col(\"AEOUT\") == \"FATAL\",\n    \"Discontinued due to adverse event\": pl.col(\"AEACN\") == \"DRUG WITHDRAWN\"\n}\n\n# Calculate population totals\npop_counts = adsl_safety.group_by(\"TRT01A\").agg(pl.len().alias(\"N\"))\n\n# Calculate AE counts for each category\nresults = []\nfor category, filter_expr in ae_categories.items():\n    if category == \"Participants in population\":\n        # Special handling for population row\n        for row in pop_counts.iter_rows(named=True):\n            results.append({\n                \"Category\": category,\n                \"TRT01A\": row[\"TRT01A\"],\n                \"n\": row[\"N\"],\n                \"pct_display\": \"\"\n            })\n    else:\n        # Count unique subjects meeting criteria\n        ae_counts = (\n            adae_safety\n            .filter(filter_expr)\n            .group_by(\"TRTA\")\n            .agg(pl.col(\"USUBJID\").n_unique().alias(\"n\"))\n        )\n        \n        # Join with population to calculate percentages\n        merged = (\n            pop_counts\n            .join(ae_counts, left_on=\"TRT01A\", right_on=\"TRTA\", how=\"left\")\n            .with_columns([\n                pl.col(\"n\").fill_null(0),\n                (100.0 * pl.col(\"n\").fill_null(0) / pl.col(\"N\")).round(1).alias(\"pct\"),\n                pl.when(pl.col(\"n\").fill_null(0) &gt; 0)\n                  .then(pl.concat_str([pl.lit(\"(\"), (100.0 * pl.col(\"n\").fill_null(0) / pl.col(\"N\")).round(1).cast(str), pl.lit(\")\")]))\n                  .otherwise(pl.lit(\"(0.0)\"))\n                  .alias(\"pct_display\")\n            ])\n        )\n        \n        for row in merged.iter_rows(named=True):\n            results.append({\n                \"Category\": category,\n                \"TRT01A\": row[\"TRT01A\"],\n                \"n\": row[\"n\"],\n                \"pct_display\": row[\"pct_display\"]\n            })\n\nae_summary = pl.DataFrame(results)",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Adverse Events Summary Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-summary.html#format-ae-summary-table",
    "href": "tlf-ae-summary.html#format-ae-summary-table",
    "title": "5  Adverse Events Summary Table",
    "section": "5.5 Format AE Summary Table",
    "text": "5.5 Format AE Summary Table\n\n# Define treatment order and category order for consistent display\ntreatments = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"]\ncategory_order = list(ae_categories.keys())\n\n# Pivot to wide format with separate n and (%) columns\ndf_ae_summary = (\n    ae_summary\n    .with_columns(pl.col(\"Category\").cast(pl.Enum(category_order)))\n    .pivot(\n        values=[\"n\", \"pct_display\"],\n        index=\"Category\", \n        on=\"TRT01A\"\n    )\n    .with_columns([pl.col(f\"n_{trt}\").cast(str) for trt in treatments])\n    .select(\n        [\"Category\"] + \n        [col for trt in treatments for col in [f\"n_{trt}\", f\"pct_display_{trt}\"]]\n    )\n    .rename({\"Category\": \"\"})\n)\n\ndf_ae_summary\n\n\nshape: (7, 7)\n\n\n\n\nn_Placebo\npct_display_Placebo\nn_Xanomeline Low Dose\npct_display_Xanomeline Low Dose\nn_Xanomeline High Dose\npct_display_Xanomeline High Dose\n\n\nenum\nstr\nstr\nstr\nstr\nstr\nstr\n\n\n\n\n\"Participants in population\"\n\"86\"\n\"\"\n\"84\"\n\"\"\n\"84\"\n\"\"\n\n\n\"With any adverse event\"\n\"69\"\n\"(80.2)\"\n\"77\"\n\"(91.7)\"\n\"79\"\n\"(94.0)\"\n\n\n\"With drug-related adverse even…\n\"44\"\n\"(51.2)\"\n\"73\"\n\"(86.9)\"\n\"70\"\n\"(83.3)\"\n\n\n\"With serious adverse event\"\n\"0\"\n\"(0.0)\"\n\"1\"\n\"(1.2)\"\n\"2\"\n\"(2.4)\"\n\n\n\"With serious drug-related adve…\n\"0\"\n\"(0.0)\"\n\"1\"\n\"(1.2)\"\n\"1\"\n\"(1.2)\"\n\n\n\"Who died\"\n\"2\"\n\"(2.3)\"\n\"1\"\n\"(1.2)\"\n\"0\"\n\"(0.0)\"\n\n\n\"Discontinued due to adverse ev…\n\"0\"\n\"(0.0)\"\n\"0\"\n\"(0.0)\"\n\"0\"\n\"(0.0)\"",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Adverse Events Summary Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-summary.html#create-rtf-output",
    "href": "tlf-ae-summary.html#create-rtf-output",
    "title": "5  Adverse Events Summary Table",
    "section": "5.6 Create RTF Output",
    "text": "5.6 Create RTF Output\n\n# Create RTF document\ndoc_ae_summary = rtf.RTFDocument(\n    df=df_ae_summary,\n    rtf_title=rtf.RTFTitle(\n        text=[\n            \"Analysis of Adverse Event Summary\",\n            \"(Safety Analysis Population)\"\n        ]\n    ),\n    rtf_column_header=[\n        rtf.RTFColumnHeader(\n            text = [\"\"] + treatments,\n            col_rel_width=[4, 2, 2, 2], \n            text_justification=[\"l\", \"c\", \"c\", \"c\"],\n        ),\n        rtf.RTFColumnHeader(\n            text=[\n                \"\",          # Empty for first column\n                \"n\", \"(%)\",  # Placebo columns\n                \"n\", \"(%)\",  # Low Dose columns\n                \"n\", \"(%)\"   # High Dose columns\n            ],\n            col_rel_width=[4] + [1] * 6,\n            text_justification=[\"l\"] + [\"c\"] * 6,\n            border_left = [\"single\"] + [\"single\", \"\"] * 3,\n            border_top = [\"\"] + [\"single\"] * 6\n        )\n    ],\n    rtf_body=rtf.RTFBody(\n        col_rel_width=[4] + [1] * 6,\n        text_justification=[\"l\"] + [\"c\"] * 6,\n        border_left = [\"single\"] + [\"single\", \"\"] * 3\n    ),\n    rtf_footnote=rtf.RTFFootnote(\n        text=[\n            \"Every subject is counted a single time for each applicable row and column.\"\n        ]\n    ),\n    rtf_source=rtf.RTFSource(\n        text=[\"Source: ADSL and ADAE datasets\"],\n    )\n)\n\n# Write RTF file\ndoc_ae_summary.write_rtf(\"rtf/tlf_ae_summary.rtf\")\n\nrtf/tlf_ae_summary.rtf\n\n\n\n\nPosixPath('pdf/tlf_ae_summary.pdf')",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Adverse Events Summary Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-specific.html",
    "href": "tlf-ae-specific.html",
    "title": "6  Specific Adverse Events Table",
    "section": "",
    "text": "6.1 Setup\nThis article demonstrates how to create a specific adverse events table by System Organ Class and Preferred Term.\nimport polars as pl\nimport rtflite as rtf\n\nadsl = pl.read_parquet(\"data/adsl.parquet\")\nadae = pl.read_parquet(\"data/adae.parquet\")\ntreatments = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"]",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Specific Adverse Events Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-specific.html#prepare-ae-summary-data",
    "href": "tlf-ae-specific.html#prepare-ae-summary-data",
    "title": "6  Specific Adverse Events Table",
    "section": "6.2 Prepare AE Summary Data",
    "text": "6.2 Prepare AE Summary Data\n\n# Get safety population counts and AE data\nadsl_safety = adsl.filter(pl.col(\"SAFFL\") == \"Y\").select([\"USUBJID\", \"TRT01A\"])\nadae_safety = adae.join(adsl_safety, on=\"USUBJID\", how=\"inner\")\npop_counts = adsl_safety.group_by(\"TRT01A\").agg(N=pl.len()).sort(\"TRT01A\")\n\n# Calculate AE counts by SOC and term\nae_counts = (\n    adae_safety.with_columns(pl.col(\"AEDECOD\").str.to_titlecase())\n    .group_by([\"TRT01A\", \"AEBODSYS\", \"AEDECOD\"])\n    .agg(n=pl.col(\"USUBJID\").n_unique())\n    .sort([\"AEBODSYS\", \"AEDECOD\", \"TRT01A\"])\n)\n\n# Build table rows\ntable_data = [\n    [\"Participants in population\"] + [str(pop_counts.filter(pl.col(\"TRT01A\") == t)[\"N\"][0]) for t in treatments],\n    [\"\"] * 4  # Blank row\n]\n\n# Add SOC and AE term rows\nfor soc in ae_counts[\"AEBODSYS\"].unique().sort():\n    table_data.append([soc] + [\"\"] * 3)\n    soc_data = ae_counts.filter(pl.col(\"AEBODSYS\") == soc)\n    \n    for ae in soc_data[\"AEDECOD\"].unique().sort():\n        row = [f\"  {ae}\"]\n        for trt in treatments:\n            count = soc_data.filter((pl.col(\"AEDECOD\") == ae) & (pl.col(\"TRT01A\") == trt))\n            row.append(str(count[\"n\"][0]) if count.height &gt; 0 else \"0\")\n        table_data.append(row)\n\ndf_ae_specific = pl.DataFrame(table_data, schema=[\"\"] + treatments, orient=\"row\")",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Specific Adverse Events Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-specific.html#create-rtf-output",
    "href": "tlf-ae-specific.html#create-rtf-output",
    "title": "6  Specific Adverse Events Table",
    "section": "6.3 Create RTF Output",
    "text": "6.3 Create RTF Output\n\ndoc_ae_specific = rtf.RTFDocument(\n    df=df_ae_specific,\n    rtf_title=rtf.RTFTitle(text=[\"Specific Adverse Events\", \"(Safety Analysis Population)\"]),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\"\", \"Placebo\\nn\", \"Xanomeline Low Dose\\nn\", \"Xanomeline High Dose\\nn\"],\n        col_rel_width=[4, 1, 1, 1],\n        text_justification=[\"l\", \"c\", \"c\", \"c\"],\n    ),\n    rtf_body=rtf.RTFBody(\n        col_rel_width=[4, 1, 1, 1],\n        text_justification=[\"l\", \"c\", \"c\", \"c\"],\n        text_font_style=lambda df, i, j: \"bold\" if j == 0 and \"  \" not in str(df[i, j]) else \"\",\n    ),\n    rtf_footnote=rtf.RTFFootnote(text=[\"Number of participants with specific adverse events.\"]),\n    rtf_source=rtf.RTFSource(text=[\"Source: ADSL and ADAE datasets\"])\n)\n\ndoc_ae_specific.write_rtf(\"rtf/tlf_ae_specific.rtf\")\n\nrtf/tlf_ae_specific.rtf\n\n\n\n\nPosixPath('pdf/tlf_ae_specific.pdf')",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Specific Adverse Events Table</span>"
    ]
  },
  {
    "objectID": "tlf-efficacy-ancova.html",
    "href": "tlf-efficacy-ancova.html",
    "title": "7  ANCOVA Efficacy Analysis",
    "section": "",
    "text": "7.1 Setup\nThis article demonstrates how to create an ANCOVA efficacy table for glucose levels at Week 24 with LOCF imputation.\nimport polars as pl\nimport rtflite as rtf\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nfrom scipy import stats as scipy_stats\nfrom importlib.resources import files\n\nadsl = pl.read_parquet(\"data/adsl.parquet\")\nadlbc = pl.read_parquet(\"data/adlbc.parquet\")\ntreatments = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"]",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>ANCOVA Efficacy Analysis</span>"
    ]
  },
  {
    "objectID": "tlf-efficacy-ancova.html#prepare-analysis-data",
    "href": "tlf-efficacy-ancova.html#prepare-analysis-data",
    "title": "7  ANCOVA Efficacy Analysis",
    "section": "7.2 Prepare Analysis Data",
    "text": "7.2 Prepare Analysis Data\n\n# Clean data types and filter for efficacy population\nadlbc_clean = adlbc.with_columns(\n    [pl.col(c).cast(str).str.strip_chars() for c in [\"USUBJID\", \"PARAMCD\", \"AVISIT\", \"TRTP\"]]\n)\nadsl_eff = adsl.filter(pl.col(\"EFFFL\") == \"Y\").select([\"USUBJID\"])\nadlbc_eff = adlbc_clean.join(adsl_eff, on=\"USUBJID\", how=\"inner\")\n\n# Apply LOCF for glucose data up to Week 24\ngluc_data = (\n    adlbc_eff.filter((pl.col(\"PARAMCD\") == \"GLUC\") & (pl.col(\"AVISITN\") &lt;= 24))\n    .sort([\"USUBJID\", \"AVISITN\"])\n    .group_by(\"USUBJID\")\n    .agg([\n        pl.col(\"TRTP\").first(),\n        pl.col(\"BASE\").first(),\n        pl.col(\"AVAL\").filter(pl.col(\"AVISITN\") == 0).first().alias(\"Baseline\"),\n        pl.col(\"AVAL\").last().alias(\"Week 24\")\n    ])\n    .filter(pl.col(\"Baseline\").is_not_null() & pl.col(\"Week 24\").is_not_null())\n    .with_columns((pl.col(\"Week 24\") - pl.col(\"Baseline\")).alias(\"CHG\"))\n)\n\n# Calculate descriptive statistics\ndesc_stats = []\nfor trt in treatments:\n    trt_data = gluc_data.filter(pl.col(\"TRTP\") == trt)\n    baseline_full = adlbc_eff.filter(\n        (pl.col(\"PARAMCD\") == \"GLUC\") & (pl.col(\"AVISIT\") == \"Baseline\") & (pl.col(\"TRTP\") == trt)\n    )\n    \n    desc_stats.append({\n        \"Treatment\": trt,\n        \"N_Baseline\": baseline_full.height,\n        \"Baseline_Mean\": baseline_full[\"AVAL\"].mean() if baseline_full.height &gt; 0 else np.nan,\n        \"Baseline_SD\": baseline_full[\"AVAL\"].std() if baseline_full.height &gt; 0 else np.nan,\n        \"N_Week24\": trt_data.height,\n        \"Week24_Mean\": trt_data[\"Week 24\"].mean() if trt_data.height &gt; 0 else np.nan,\n        \"Week24_SD\": trt_data[\"Week 24\"].std() if trt_data.height &gt; 0 else np.nan,\n        \"N_Change\": trt_data.height,\n        \"Change_Mean\": trt_data[\"CHG\"].mean() if trt_data.height &gt; 0 else np.nan,\n        \"Change_SD\": trt_data[\"CHG\"].std() if trt_data.height &gt; 0 else np.nan\n    })\n\n# Perform ANCOVA\nancova_df = gluc_data.to_pandas()\nancova_df[\"TRTP\"] = pd.Categorical(ancova_df[\"TRTP\"], categories=treatments)\nmodel = smf.ols(\"CHG ~ TRTP + BASE\", data=ancova_df).fit()\n\n# Calculate LS means and confidence intervals\nbase_mean = ancova_df[\"BASE\"].mean()\nvar_cov = model.cov_params()\nls_means = []\n\nfor i, trt in enumerate(treatments):\n    x_pred = np.array([1, int(i==1), int(i==2), base_mean])\n    ls_mean = model.predict(pd.DataFrame({\"TRTP\": [trt], \"BASE\": [base_mean]}))[0]\n    se_pred = np.sqrt(x_pred @ var_cov @ x_pred.T)\n    \n    ls_means.append({\n        \"Treatment\": trt,\n        \"LS_Mean\": ls_mean,\n        \"CI_Lower\": ls_mean - 1.96 * se_pred,\n        \"CI_Upper\": ls_mean + 1.96 * se_pred\n    })",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>ANCOVA Efficacy Analysis</span>"
    ]
  },
  {
    "objectID": "tlf-efficacy-ancova.html#create-tables-for-rtf-output",
    "href": "tlf-efficacy-ancova.html#create-tables-for-rtf-output",
    "title": "7  ANCOVA Efficacy Analysis",
    "section": "7.3 Create Tables for RTF Output",
    "text": "7.3 Create Tables for RTF Output\n\n# Table 1: Descriptive Statistics\ntbl1_data = [\n    [\n        s[\"Treatment\"],\n        str(s[\"N_Baseline\"]),\n        f\"{s['Baseline_Mean']:.1f} ({s['Baseline_SD']:.2f})\",\n        str(s[\"N_Week24\"]),\n        f\"{s['Week24_Mean']:.1f} ({s['Week24_SD']:.2f})\",\n        str(s[\"N_Change\"]),\n        f\"{s['Change_Mean']:.1f} ({s['Change_SD']:.2f})\",\n        f\"{ls['LS_Mean']:.2f} ({ls['CI_Lower']:.2f}, {ls['CI_Upper']:.2f})\"\n    ]\n    for s, ls in zip(desc_stats, ls_means)\n]\n\ntbl1 = pl.DataFrame(tbl1_data, orient=\"row\", schema=[\n    \"Treatment\", \"N_Base\", \"Mean_SD_Base\", \"N_Wk24\", \"Mean_SD_Wk24\", \n    \"N_Chg\", \"Mean_SD_Chg\", \"LS_Mean_CI\"\n])\n\n# Table 2: Pairwise Comparisons\ntbl2_data = []\nfor comp_name, trt_name in [(\"Xanomeline Low Dose - Placebo\", \"TRTP[T.Xanomeline Low Dose]\"),\n                             (\"Xanomeline High Dose - Placebo\", \"TRTP[T.Xanomeline High Dose]\")] :\n    coef = model.params[trt_name]\n    se = model.bse[trt_name]\n    t_stat = coef / se\n    p_value = 2 * (1 - scipy_stats.t.cdf(abs(t_stat), model.df_resid))\n    \n    tbl2_data.append([\n        comp_name,\n        f\"{coef:.2f} ({coef - 1.96*se:.2f}, {coef + 1.96*se:.2f})\",\n        f\"{p_value:.3f}\"\n    ])\n\ntbl2 = pl.DataFrame(tbl2_data, orient=\"row\", schema=[\"Comparison\", \"Diff_CI\", \"P_Value\"])",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>ANCOVA Efficacy Analysis</span>"
    ]
  },
  {
    "objectID": "tlf-efficacy-ancova.html#create-rtf-document",
    "href": "tlf-efficacy-ancova.html#create-rtf-document",
    "title": "7  ANCOVA Efficacy Analysis",
    "section": "7.4 Create RTF Document",
    "text": "7.4 Create RTF Document\n\n# Create RTF document with two sections\ndoc_ancova = rtf.RTFDocument(\n    df=[tbl1, tbl2],\n    rtf_title=rtf.RTFTitle(text=[\n        \"ANCOVA of Change from Baseline Glucose (mmol/L) at Week 24\", \"LOCF\", \n        \"Efficacy Analysis Population\"\n    ]),\n    rtf_column_header=[\n        [rtf.RTFColumnHeader(text=[\"\", \"Baseline\", \"Week 24\", \"Change from Baseline\"],\n                           col_rel_width=[3, 2, 2, 4], text_justification=[\"l\", \"c\", \"c\", \"c\"]),\n         rtf.RTFColumnHeader(text=[\"Treatment\", \"N\", \"Mean (SD)\", \"N\", \"Mean (SD)\", \"N\", \n                                  \"Mean (SD)\", \"LS Mean (95% CI){^a}\"],\n                           col_rel_width=[3, 0.7, 1.3, 0.7, 1.3, 0.7, 1.3, 2],\n                           text_justification=[\"l\"] + [\"c\"] * 7, border_bottom=\"single\")],\n        [rtf.RTFColumnHeader(text=[\"Pairwise Comparison\", \"Difference in LS Mean (95% CI){^a}\", \"p-Value\"],\n                           col_rel_width=[5, 4, 2], text_justification=[\"l\", \"c\", \"c\"])]\n    ],\n    rtf_body=[\n        rtf.RTFBody(col_rel_width=[3, 0.7, 1.3, 0.7, 1.3, 0.7, 1.3, 2], \n                   text_justification=[\"l\"] + [\"c\"] * 7),\n        rtf.RTFBody(col_rel_width=[5, 4, 2], text_justification=[\"l\", \"c\", \"c\"])\n    ],\n    rtf_footnote=rtf.RTFFootnote(text=[\n        \"{^a}Based on an ANCOVA model after adjusting baseline value. LOCF approach is used to impute missing values.\",\n        \"ANCOVA = Analysis of Covariance, LOCF = Last Observation Carried Forward\",\n        \"CI = Confidence Interval, LS = Least Squares, SD = Standard Deviation\"\n    ]),\n    rtf_source=rtf.RTFSource(text=[\"Source: ADLBC dataset\"])\n)\n\ndoc_ancova.write_rtf(\"rtf/tlf_efficacy_ancova.rtf\")\n\nrtf/tlf_efficacy_ancova.rtf\n\n\n\n\nPosixPath('pdf/tlf_efficacy_ancova.pdf')",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>ANCOVA Efficacy Analysis</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "8  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n2",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111.",
    "crumbs": [
      "References"
    ]
  }
]