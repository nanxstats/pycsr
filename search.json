[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python for Clinical Study Reports and Submission",
    "section": "",
    "text": "Preface\nThis is a Quarto book.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from Markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\nimport polars as pl\nfrom datetime import datetime\n\ndf = pl.DataFrame(\n    {\n        \"integer\": [1, 2, 3],\n        \"date\": [\n            datetime(2025, 1, 1),\n            datetime(2025, 1, 2),\n            datetime(2025, 1, 3),\n        ],\n        \"float\": [4.0, 5.0, 6.0],\n        \"string\": [\"a\", \"b\", \"c\"],\n    }\n)\n\nprint(df)\n\nshape: (3, 4)\n┌─────────┬─────────────────────┬───────┬────────┐\n│ integer ┆ date                ┆ float ┆ string │\n│ ---     ┆ ---                 ┆ ---   ┆ ---    │\n│ i64     ┆ datetime[μs]        ┆ f64   ┆ str    │\n╞═════════╪═════════════════════╪═══════╪════════╡\n│ 1       ┆ 2025-01-01 00:00:00 ┆ 4.0   ┆ a      │\n│ 2       ┆ 2025-01-02 00:00:00 ┆ 5.0   ┆ b      │\n│ 3       ┆ 2025-01-03 00:00:00 ┆ 6.0   ┆ c      │\n└─────────┴─────────────────────┴───────┴────────┘\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "tlf-population.html",
    "href": "tlf-population.html",
    "title": "2  Study Population",
    "section": "",
    "text": "2.1 Setup\nThis article demonstrates how to create an analysis population overview table.\nimport polars as pl\nimport rtflite as rtf\n\nadsl = pl.read_parquet(\"data/adsl.parquet\")\ntreatments = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"]",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Study Population</span>"
    ]
  },
  {
    "objectID": "tlf-population.html#create-population-table",
    "href": "tlf-population.html#create-population-table",
    "title": "2  Study Population",
    "section": "2.2 Create Population Table",
    "text": "2.2 Create Population Table\n\n# Define populations to analyze\npopulations = {\n    \"Participants in population\": None,\n    \"Participants included in ITT population\": \"ITTFL\",\n    \"Participants included in efficacy population\": \"EFFFL\", \n    \"Participants included in safety population\": \"SAFFL\"\n}\n\n# Calculate statistics for each population\ntable_data = []\ntotals = adsl.group_by(\"TRT01P\").agg(total=pl.len())\n\nfor pop_name, flag in populations.items():\n    row = [pop_name]\n    \n    # Filter and calculate counts\n    df_pop = adsl if flag is None else adsl.filter(pl.col(flag) == \"Y\")\n    stats = (\n        df_pop.group_by(\"TRT01P\")\n        .agg(n=pl.len())\n        .join(totals, on=\"TRT01P\")\n        .with_columns(pct=(100.0 * pl.col(\"n\") / pl.col(\"total\")).round(1))\n    )\n    \n    # Format results for each treatment\n    for trt in treatments:\n        trt_data = stats.filter(pl.col(\"TRT01P\") == trt)\n        if trt_data.height &gt; 0:\n            n, pct = trt_data[\"n\"][0], trt_data[\"pct\"][0]\n            row.append(str(n) if flag is None else f\"{n} ({pct:5.1f})\")\n        else:\n            row.append(\"0 (  0.0)\")\n    \n    table_data.append(row)\n\ndf_overview = pl.DataFrame(table_data, schema=[\"\"] + treatments, orient=\"row\")",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Study Population</span>"
    ]
  },
  {
    "objectID": "tlf-population.html#create-rtf-output",
    "href": "tlf-population.html#create-rtf-output",
    "title": "2  Study Population",
    "section": "2.3 Create RTF Output",
    "text": "2.3 Create RTF Output\n\ndoc_overview = rtf.RTFDocument(\n    df=df_overview,\n    rtf_title=rtf.RTFTitle(\n        text=[\"Analysis Population\", \"All Participants Randomized\"]\n    ),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\"\", \"Placebo\\nn (%)\", \"Xanomeline Low Dose\\nn (%)\", \"Xanomeline High Dose\\nn (%)\"],\n        col_rel_width=[4, 2, 2, 2],\n        text_justification=[\"l\", \"c\", \"c\", \"c\"],\n    ),\n    rtf_body=rtf.RTFBody(\n        col_rel_width=[4, 2, 2, 2],\n        text_justification=[\"l\", \"c\", \"c\", \"c\"],\n    ),\n    rtf_source=rtf.RTFSource(text=[\"Source: ADSL dataset\"])\n)\n\ndoc_overview.write_rtf(\"rtf/tlf_population.rtf\")\n\nrtf/tlf_population.rtf\n\n\n\n\nPosixPath('pdf/tlf_population.pdf')",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Study Population</span>"
    ]
  },
  {
    "objectID": "tlf-baseline.html",
    "href": "tlf-baseline.html",
    "title": "3  Baseline Characteristics Table",
    "section": "",
    "text": "3.1 Overview\nThis article demonstrates how to create a baseline characteristics table for clinical study reports using rtflite.\nBaseline characteristics tables summarize demographic and clinical characteristics of study participants at enrollment. These tables are essential for understanding the study population and assessing comparability between treatment groups.",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Baseline Characteristics Table</span>"
    ]
  },
  {
    "objectID": "tlf-baseline.html#imports",
    "href": "tlf-baseline.html#imports",
    "title": "3  Baseline Characteristics Table",
    "section": "3.2 Imports",
    "text": "3.2 Imports\n\nimport polars as pl\nimport rtflite as rtf",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Baseline Characteristics Table</span>"
    ]
  },
  {
    "objectID": "tlf-baseline.html#data-preparation",
    "href": "tlf-baseline.html#data-preparation",
    "title": "3  Baseline Characteristics Table",
    "section": "3.3 Data Preparation",
    "text": "3.3 Data Preparation\n\nadsl_baseline = (\n    pl.read_parquet(\"data/adsl.parquet\")\n    .filter(pl.col(\"SAFFL\") == \"Y\")\n    .select([\"USUBJID\", \"TRT01P\", \"AGE\", \"SEX\", \"RACE\"])\n    .with_columns([\n        pl.col(\"SEX\").replace({\"F\": \"Female\", \"M\": \"Male\"}),\n        pl.col(\"RACE\").str.to_titlecase()\n    ])\n)",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Baseline Characteristics Table</span>"
    ]
  },
  {
    "objectID": "tlf-baseline.html#statistics-function",
    "href": "tlf-baseline.html#statistics-function",
    "title": "3  Baseline Characteristics Table",
    "section": "3.4 Statistics Function",
    "text": "3.4 Statistics Function\n\ndef get_statistics(df, var, is_continuous=False):\n    expr = [\n            pl.col(var).mean().round(1).alias(\"mean\"),\n            pl.col(var).std().round(1).alias(\"sd\"),\n            pl.col(var).median().round(1).alias(\"median\"),\n            pl.col(var).min().alias(\"min\"),\n            pl.col(var).max().alias(\"max\")\n        ]\n\n    if is_continuous:\n        # Continuous statistics by treatment\n        by_treatment = df.group_by(\"TRT01P\").agg(expr)\n        \n        # Overall statistics\n        overall = df.select(expr).row(0)\n        \n        return by_treatment, overall\n    else:\n        # Categorical counts and percentages\n        total_n = df.height\n        by_treatment = (\n            df.group_by([\"TRT01P\", var])\n            .len()\n            .join(df.group_by(\"TRT01P\").len().rename({\"len\": \"total\"}), on=\"TRT01P\")\n            .with_columns(\n                pl.format(\"{} ({}%)\", \n                    pl.col(\"len\"), \n                    (100 * pl.col(\"len\") / pl.col(\"total\")).round(1)\n                ).alias(\"formatted\")\n            )\n        )\n        \n        # Overall counts\n        overall = (\n            df.group_by(var)\n            .len()\n            .with_columns(\n                pl.format(\"{} ({}%)\", \n                    pl.col(\"len\"), \n                    (100 * pl.col(\"len\") / total_n).round(1)\n                ).alias(\"formatted\")\n            )\n        )\n        \n        return by_treatment, overall",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Baseline Characteristics Table</span>"
    ]
  },
  {
    "objectID": "tlf-baseline.html#build-table-data",
    "href": "tlf-baseline.html#build-table-data",
    "title": "3  Baseline Characteristics Table",
    "section": "3.5 Build Table Data",
    "text": "3.5 Build Table Data\n\n# Treatment groups and counts\ntreatments = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"]\ntreatment_counts = dict(\n    adsl_baseline.group_by(\"TRT01P\").len().iter_rows()\n)\n\ndef create_variable_rows(df, var_name, categories=None, is_continuous=False):\n    rows = [[var_name, \"\", \"\", \"\", \"\"]]\n    \n    by_treatment, overall_stats = get_statistics(df, var_name, is_continuous)\n    \n    if is_continuous:\n        # Mean (SD) row\n        row = [\"  Mean (SD)\"]\n        for trt in treatments:\n            trt_stats = by_treatment.filter(pl.col(\"TRT01P\") == trt)\n            if trt_stats.height &gt; 0:\n                mean, sd = trt_stats.select([\"mean\", \"sd\"]).row(0)\n                row.append(f\"{mean} ({sd})\")\n            else:\n                row.append(\"\")\n        row.append(f\"{overall_stats[0]} ({overall_stats[1]})\")\n        rows.append(row)\n        \n        # Median [Min, Max] row  \n        row = [\"  Median [Min, Max]\"]\n        for trt in treatments:\n            trt_stats = by_treatment.filter(pl.col(\"TRT01P\") == trt)\n            if trt_stats.height &gt; 0:\n                median, min_val, max_val = trt_stats.select([\"median\", \"min\", \"max\"]).row(0)\n                row.append(f\"{median} [{min_val}, {max_val}]\")\n            else:\n                row.append(\"\")\n        row.append(f\"{overall_stats[2]} [{overall_stats[3]}, {overall_stats[4]}]\")\n        rows.append(row)\n    else:\n        # Categorical variable rows\n        for cat in categories:\n            row = [f\"  {cat}\"]\n            \n            for trt in treatments:\n                trt_data = by_treatment.filter(\n                    (pl.col(\"TRT01P\") == trt) & (pl.col(var_name) == cat)\n                )\n                if trt_data.height &gt; 0:\n                    row.append(trt_data[\"formatted\"][0])\n                else:\n                    row.append(\"0 (0.0%)\")\n            \n            # Overall column\n            overall_data = overall_stats.filter(pl.col(var_name) == cat)\n            if overall_data.height &gt; 0:\n                row.append(overall_data[\"formatted\"][0])\n            else:\n                row.append(\"0 (0.0%)\")\n            rows.append(row)\n    \n    return rows\n\n# Build complete table\ntable_data = []\ntable_data.extend(create_variable_rows(adsl_baseline, \"SEX\", [\"Female\", \"Male\"]))\ntable_data.extend(create_variable_rows(adsl_baseline, \"AGE\", is_continuous=True))\ntable_data.extend(create_variable_rows(\n    adsl_baseline, \"RACE\", \n    [\"Black Or African American\", \"White\", \"American Indian Or Alaska Native\"]\n))\n\ndf_baseline = pl.DataFrame(table_data, orient=\"row\")\n\ndf_baseline\n\n\nshape: (10, 5)\n\n\n\ncolumn_0\ncolumn_1\ncolumn_2\ncolumn_3\ncolumn_4\n\n\nstr\nstr\nstr\nstr\nstr\n\n\n\n\n\"SEX\"\n\"\"\n\"\"\n\"\"\n\"\"\n\n\n\"  Female\"\n\"53 (61.6%)\"\n\"50 (59.5%)\"\n\"40 (47.6%)\"\n\"143 (56.3%)\"\n\n\n\"  Male\"\n\"33 (38.4%)\"\n\"34 (40.5%)\"\n\"44 (52.4%)\"\n\"111 (43.7%)\"\n\n\n\"AGE\"\n\"\"\n\"\"\n\"\"\n\"\"\n\n\n\"  Mean (SD)\"\n\"75.2 (8.6)\"\n\"75.7 (8.3)\"\n\"74.4 (7.9)\"\n\"75.1 (8.2)\"\n\n\n\"  Median [Min, Max]\"\n\"76.0 [52.0, 89.0]\"\n\"77.5 [51.0, 88.0]\"\n\"76.0 [56.0, 88.0]\"\n\"77.0 [51.0, 89.0]\"\n\n\n\"RACE\"\n\"\"\n\"\"\n\"\"\n\"\"\n\n\n\"  Black Or African American\"\n\"8 (9.3%)\"\n\"6 (7.1%)\"\n\"9 (10.7%)\"\n\"23 (9.1%)\"\n\n\n\"  White\"\n\"78 (90.7%)\"\n\"78 (92.9%)\"\n\"74 (88.1%)\"\n\"230 (90.6%)\"\n\n\n\"  American Indian Or Alaska Na…\n\"0 (0.0%)\"\n\"0 (0.0%)\"\n\"1 (1.2%)\"\n\"1 (0.4%)\"",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Baseline Characteristics Table</span>"
    ]
  },
  {
    "objectID": "tlf-baseline.html#create-rtf-output",
    "href": "tlf-baseline.html#create-rtf-output",
    "title": "3  Baseline Characteristics Table",
    "section": "3.6 Create RTF Output",
    "text": "3.6 Create RTF Output\n\n# Column headers with N counts\ncol_headers = [\"\"] + [f\"{trt}\\n(N={treatment_counts[trt]})\" for trt in treatments] + [f\"Overall\\n(N={adsl_baseline.height})\"]\n\ndoc_baseline = rtf.RTFDocument(\n    df=df_baseline,\n    rtf_title=rtf.RTFTitle(\n        text=[\"Baseline Characteristics of Participants\", \"(All Participants Randomized)\"]\n    ),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=col_headers,\n        text_justification=[\"l\"] + [\"c\"] * 4\n    ),\n    rtf_body=rtf.RTFBody(\n        col_rel_width=[2] + [1] * 4,\n        text_justification=[\"l\"] + [\"c\"] * 4\n    )\n)\n\ndoc_baseline.write_rtf(\"rtf/tlf_baseline.rtf\")\n\nrtf/tlf_baseline.rtf\n\n\n\n\nPosixPath('pdf/tlf_baseline.pdf')",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Baseline Characteristics Table</span>"
    ]
  },
  {
    "objectID": "tlf-disposition.html",
    "href": "tlf-disposition.html",
    "title": "4  Disposition of Participants Table",
    "section": "",
    "text": "4.1 Overview\nThis article demonstrates how to create a disposition table following ICH E3 guidance using rtflite, based on the R4CSR example.\nThe disposition table summarizes the flow of participants through the study, including: - Number of participants randomized - Number who discontinued and reasons for discontinuation\n- Number who completed the study",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Disposition of Participants Table</span>"
    ]
  },
  {
    "objectID": "tlf-disposition.html#setup",
    "href": "tlf-disposition.html#setup",
    "title": "4  Disposition of Participants Table",
    "section": "4.2 Setup",
    "text": "4.2 Setup\n\nimport polars as pl\nimport rtflite as rtf\n\nadsl = pl.read_parquet(\"data/adsl.parquet\")\n\ntreatments = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"]",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Disposition of Participants Table</span>"
    ]
  },
  {
    "objectID": "tlf-disposition.html#calculate-disposition-statistics",
    "href": "tlf-disposition.html#calculate-disposition-statistics",
    "title": "4  Disposition of Participants Table",
    "section": "4.3 Calculate Disposition Statistics",
    "text": "4.3 Calculate Disposition Statistics\n\nn_rand = (\n    adsl\n    .group_by(\"TRT01P\")\n    .agg(n=pl.len())\n    .sort(\"TRT01P\")\n)\n\ndef calc_stats(df, filter_expr=None):\n    if filter_expr is not None:\n        df = df.filter(filter_expr)\n    \n    counts = (\n        df\n        .group_by(\"TRT01P\")\n        .agg(n=pl.len())\n        .join(n_rand, on=\"TRT01P\", suffix=\"_total\")\n        .with_columns(\n            pct=(100 * pl.col(\"n\") / pl.col(\"n_total\")).round(1)\n        )\n        .sort(\"TRT01P\")\n    )\n    return counts\n\nstats = {\n    \"completed\": calc_stats(adsl, pl.col(\"DCREASCD\") == \"Completed\"),\n    \"discontinued\": calc_stats(adsl, pl.col(\"DCREASCD\") != \"Completed\")\n}\n\ndisc_reasons = (\n    adsl\n    .filter(pl.col(\"DCREASCD\") != \"Completed\")\n    .group_by([\"TRT01P\", \"DCREASCD\"])\n    .agg(n=pl.len())\n    .join(n_rand, on=\"TRT01P\", suffix=\"_total\")\n    .with_columns(\n        pct=(100 * pl.col(\"n\") / pl.col(\"n_total\")).round(1)\n    )\n    .sort([\"DCREASCD\", \"TRT01P\"])\n)",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Disposition of Participants Table</span>"
    ]
  },
  {
    "objectID": "tlf-disposition.html#build-table-data",
    "href": "tlf-disposition.html#build-table-data",
    "title": "4  Disposition of Participants Table",
    "section": "4.4 Build Table Data",
    "text": "4.4 Build Table Data\n\ndef format_row(label, stats_df=None, reason=None):\n    row = [label]\n    \n    for trt in treatments:\n        if stats_df is None:  # For total participants row\n            n = n_rand.filter(pl.col(\"TRT01P\") == trt)[\"n\"][0]\n            row.extend([str(n), \"\"])\n        else:\n            # Filter for specific treatment (and reason if provided)\n            filter_expr = pl.col(\"TRT01P\") == trt\n            if reason:\n                filter_expr = filter_expr & (pl.col(\"DCREASCD\") == reason)\n            \n            data = stats_df.filter(filter_expr)\n            if len(data) &gt; 0:\n                row.extend([str(data[\"n\"][0]), f\"({data['pct'][0]:.1f}%)\"])\n            else:\n                row.extend([\"0\", \"(0.0%)\"])\n    \n    return row\n\ntable_data = [\n    format_row(\"Participants in population\"),\n    format_row(\"Completed\", stats[\"completed\"]),\n    format_row(\"Discontinued\", stats[\"discontinued\"])\n]\n\nfor reason in disc_reasons[\"DCREASCD\"].unique().sort():\n    table_data.append(\n        format_row(f\"    {reason}\", disc_reasons, reason)\n    )\n\ncol_headers = [\"\"] + [f\"{trt}_{col}\" for trt in treatments for col in [\"n\", \"(%)\"]]\ndf_disp = pl.DataFrame(table_data, schema=col_headers, orient=\"row\")\n\ndf_disp\n\n\nshape: (12, 7)\n\n\n\ncolumn_0\nPlacebo_n\nPlacebo_(%)\nXanomeline Low Dose_n\nXanomeline Low Dose_(%)\nXanomeline High Dose_n\nXanomeline High Dose_(%)\n\n\nstr\nstr\nstr\nstr\nstr\nstr\nstr\n\n\n\n\n\"Participants in population\"\n\"86\"\n\"\"\n\"84\"\n\"\"\n\"84\"\n\"\"\n\n\n\"Completed\"\n\"58\"\n\"(67.4%)\"\n\"25\"\n\"(29.8%)\"\n\"27\"\n\"(32.1%)\"\n\n\n\"Discontinued\"\n\"28\"\n\"(32.6%)\"\n\"59\"\n\"(70.2%)\"\n\"57\"\n\"(67.9%)\"\n\n\n\"    Adverse Event\"\n\"8\"\n\"(9.3%)\"\n\"44\"\n\"(52.4%)\"\n\"40\"\n\"(47.6%)\"\n\n\n\"    Death\"\n\"2\"\n\"(2.3%)\"\n\"1\"\n\"(1.2%)\"\n\"0\"\n\"(0.0%)\"\n\n\n…\n…\n…\n…\n…\n…\n…\n\n\n\"    Lost to Follow-up\"\n\"1\"\n\"(1.2%)\"\n\"1\"\n\"(1.2%)\"\n\"0\"\n\"(0.0%)\"\n\n\n\"    Physician Decision\"\n\"1\"\n\"(1.2%)\"\n\"0\"\n\"(0.0%)\"\n\"2\"\n\"(2.4%)\"\n\n\n\"    Protocol Violation\"\n\"1\"\n\"(1.2%)\"\n\"1\"\n\"(1.2%)\"\n\"1\"\n\"(1.2%)\"\n\n\n\"    Sponsor Decision\"\n\"2\"\n\"(2.3%)\"\n\"2\"\n\"(2.4%)\"\n\"3\"\n\"(3.6%)\"\n\n\n\"    Withdrew Consent\"\n\"9\"\n\"(10.5%)\"\n\"10\"\n\"(11.9%)\"\n\"8\"\n\"(9.5%)\"",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Disposition of Participants Table</span>"
    ]
  },
  {
    "objectID": "tlf-disposition.html#generate-rtf-output",
    "href": "tlf-disposition.html#generate-rtf-output",
    "title": "4  Disposition of Participants Table",
    "section": "4.5 Generate RTF Output",
    "text": "4.5 Generate RTF Output\n\ndoc_disp = rtf.RTFDocument(\n    df=df_disp,\n    rtf_title=rtf.RTFTitle(text=[\"Disposition of Participants\"]),\n    rtf_column_header=[\n        rtf.RTFColumnHeader(\n            text=[\"\"] + treatments,\n            col_rel_width=[3] + [2] * 3,\n            text_justification=[\"l\"] + [\"c\"] * 3,\n        ),\n        rtf.RTFColumnHeader(\n            text=[\"\", \"n\", \"(%)\", \"n\", \"(%)\", \"n\", \"(%)\"],\n            col_rel_width=[3] + [1] * 6,\n            text_justification=[\"l\"] + [\"c\"] * 6,\n            border_top=[\"\"] + [\"single\"] * 6,\n            border_left=[\"single\"] + [\"single\", \"\"] * 3\n        )\n    ],\n    rtf_body=rtf.RTFBody(\n        col_rel_width=[3] + [1] * 6,\n        text_justification=[\"l\"] + [\"c\"] * 6,\n        border_left=[\"single\"] + [\"single\", \"\"] * 3\n    ),\n    rtf_source=rtf.RTFSource(text=[\"Source: ADSL dataset\"])\n)\n\ndoc_disp.write_rtf(\"rtf/tlf_disposition.rtf\")\n\nrtf/tlf_disposition.rtf\n\n\n\n\nPosixPath('pdf/tlf_disposition.pdf')",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Disposition of Participants Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-summary.html",
    "href": "tlf-ae-summary.html",
    "title": "5  Adverse Events Summary Table",
    "section": "",
    "text": "5.1 Overview\nThis article demonstrates how to create an adverse events (AE) summary table for clinical study reports using rtflite.\nAdverse events summary tables are critical safety assessments in clinical trials. They typically show the number and percentage of participants experiencing various categories of adverse events by treatment group.",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Adverse Events Summary Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-summary.html#imports",
    "href": "tlf-ae-summary.html#imports",
    "title": "5  Adverse Events Summary Table",
    "section": "5.2 Imports",
    "text": "5.2 Imports\n\nimport polars as pl\nimport rtflite as rtf",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Adverse Events Summary Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-summary.html#data-preparation",
    "href": "tlf-ae-summary.html#data-preparation",
    "title": "5  Adverse Events Summary Table",
    "section": "5.3 Data Preparation",
    "text": "5.3 Data Preparation\n\n# Load and prepare safety population data\nadsl = pl.read_parquet(\"data/adsl.parquet\")\nadae = pl.read_parquet(\"data/adae.parquet\")\n\n# Safety population \nadsl_safety = adsl.filter(pl.col(\"SAFFL\") == \"Y\").select([\"USUBJID\", \"TRT01A\"])\nadae_safety = adae.join(adsl_safety, on=\"USUBJID\").with_columns(pl.col(\"TRT01A\").alias(\"TRTA\"))",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Adverse Events Summary Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-summary.html#ae-summary-calculations",
    "href": "tlf-ae-summary.html#ae-summary-calculations",
    "title": "5  Adverse Events Summary Table",
    "section": "5.4 AE Summary Calculations",
    "text": "5.4 AE Summary Calculations\n\n# Define AE categories with their filter conditions\nae_categories = {\n    \"Participants in population\": None,  # Special case - uses total N\n    \"With any adverse event\": pl.lit(True),  # All AEs\n    \"With drug-related adverse event\": pl.col(\"AEREL\").is_in([\"POSSIBLE\", \"PROBABLE\", \"DEFINITE\", \"RELATED\"]),\n    \"With serious adverse event\": pl.col(\"AESER\") == \"Y\",\n    \"With serious drug-related adverse event\": (\n        (pl.col(\"AESER\") == \"Y\") & \n        pl.col(\"AEREL\").is_in([\"POSSIBLE\", \"PROBABLE\", \"DEFINITE\", \"RELATED\"])\n    ),\n    \"Who died\": pl.col(\"AEOUT\") == \"FATAL\",\n    \"Discontinued due to adverse event\": pl.col(\"AEACN\") == \"DRUG WITHDRAWN\"\n}\n\n# Calculate population totals\npop_counts = adsl_safety.group_by(\"TRT01A\").agg(pl.len().alias(\"N\"))\n\n# Calculate AE counts for each category\nresults = []\nfor category, filter_expr in ae_categories.items():\n    if category == \"Participants in population\":\n        # Special handling for population row\n        for row in pop_counts.iter_rows(named=True):\n            results.append({\n                \"Category\": category,\n                \"TRT01A\": row[\"TRT01A\"],\n                \"n\": row[\"N\"],\n                \"pct_display\": \"\"\n            })\n    else:\n        # Count unique subjects meeting criteria\n        ae_counts = (\n            adae_safety\n            .filter(filter_expr)\n            .group_by(\"TRTA\")\n            .agg(pl.col(\"USUBJID\").n_unique().alias(\"n\"))\n        )\n        \n        # Join with population to calculate percentages\n        merged = (\n            pop_counts\n            .join(ae_counts, left_on=\"TRT01A\", right_on=\"TRTA\", how=\"left\")\n            .with_columns([\n                pl.col(\"n\").fill_null(0),\n                (100.0 * pl.col(\"n\").fill_null(0) / pl.col(\"N\")).round(1).alias(\"pct\"),\n                pl.when(pl.col(\"n\").fill_null(0) &gt; 0)\n                  .then(pl.concat_str([pl.lit(\"(\"), (100.0 * pl.col(\"n\").fill_null(0) / pl.col(\"N\")).round(1).cast(str), pl.lit(\")\")]))\n                  .otherwise(pl.lit(\"(0.0)\"))\n                  .alias(\"pct_display\")\n            ])\n        )\n        \n        for row in merged.iter_rows(named=True):\n            results.append({\n                \"Category\": category,\n                \"TRT01A\": row[\"TRT01A\"],\n                \"n\": row[\"n\"],\n                \"pct_display\": row[\"pct_display\"]\n            })\n\nae_summary = pl.DataFrame(results)",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Adverse Events Summary Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-summary.html#format-ae-summary-table",
    "href": "tlf-ae-summary.html#format-ae-summary-table",
    "title": "5  Adverse Events Summary Table",
    "section": "5.5 Format AE Summary Table",
    "text": "5.5 Format AE Summary Table\n\n# Define treatment order and category order for consistent display\ntreatments = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"]\ncategory_order = list(ae_categories.keys())\n\n# Pivot to wide format with separate n and (%) columns\ndf_ae_summary = (\n    ae_summary\n    .with_columns(pl.col(\"Category\").cast(pl.Enum(category_order)))\n    .pivot(\n        values=[\"n\", \"pct_display\"],\n        index=\"Category\", \n        on=\"TRT01A\"\n    )\n    .with_columns([pl.col(f\"n_{trt}\").cast(str) for trt in treatments])\n    .select(\n        [\"Category\"] + \n        [col for trt in treatments for col in [f\"n_{trt}\", f\"pct_display_{trt}\"]]\n    )\n    .rename({\"Category\": \"\"})\n)\n\ndf_ae_summary\n\n\nshape: (7, 7)\n\n\n\n\nn_Placebo\npct_display_Placebo\nn_Xanomeline Low Dose\npct_display_Xanomeline Low Dose\nn_Xanomeline High Dose\npct_display_Xanomeline High Dose\n\n\nenum\nstr\nstr\nstr\nstr\nstr\nstr\n\n\n\n\n\"Participants in population\"\n\"86\"\n\"\"\n\"84\"\n\"\"\n\"84\"\n\"\"\n\n\n\"With any adverse event\"\n\"69\"\n\"(80.2)\"\n\"77\"\n\"(91.7)\"\n\"79\"\n\"(94.0)\"\n\n\n\"With drug-related adverse even…\n\"44\"\n\"(51.2)\"\n\"73\"\n\"(86.9)\"\n\"70\"\n\"(83.3)\"\n\n\n\"With serious adverse event\"\n\"0\"\n\"(0.0)\"\n\"1\"\n\"(1.2)\"\n\"2\"\n\"(2.4)\"\n\n\n\"With serious drug-related adve…\n\"0\"\n\"(0.0)\"\n\"1\"\n\"(1.2)\"\n\"1\"\n\"(1.2)\"\n\n\n\"Who died\"\n\"2\"\n\"(2.3)\"\n\"1\"\n\"(1.2)\"\n\"0\"\n\"(0.0)\"\n\n\n\"Discontinued due to adverse ev…\n\"0\"\n\"(0.0)\"\n\"0\"\n\"(0.0)\"\n\"0\"\n\"(0.0)\"",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Adverse Events Summary Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-summary.html#create-rtf-output",
    "href": "tlf-ae-summary.html#create-rtf-output",
    "title": "5  Adverse Events Summary Table",
    "section": "5.6 Create RTF Output",
    "text": "5.6 Create RTF Output\n\n# Create RTF document\ndoc_ae_summary = rtf.RTFDocument(\n    df=df_ae_summary,\n    rtf_title=rtf.RTFTitle(\n        text=[\n            \"Analysis of Adverse Event Summary\",\n            \"(Safety Analysis Population)\"\n        ]\n    ),\n    rtf_column_header=[\n        rtf.RTFColumnHeader(\n            text = [\"\"] + treatments,\n            col_rel_width=[4, 2, 2, 2], \n            text_justification=[\"l\", \"c\", \"c\", \"c\"],\n        ),\n        rtf.RTFColumnHeader(\n            text=[\n                \"\",          # Empty for first column\n                \"n\", \"(%)\",  # Placebo columns\n                \"n\", \"(%)\",  # Low Dose columns\n                \"n\", \"(%)\"   # High Dose columns\n            ],\n            col_rel_width=[4] + [1] * 6,\n            text_justification=[\"l\"] + [\"c\"] * 6,\n            border_left = [\"single\"] + [\"single\", \"\"] * 3,\n            border_top = [\"\"] + [\"single\"] * 6\n        )\n    ],\n    rtf_body=rtf.RTFBody(\n        col_rel_width=[4] + [1] * 6,\n        text_justification=[\"l\"] + [\"c\"] * 6,\n        border_left = [\"single\"] + [\"single\", \"\"] * 3\n    ),\n    rtf_footnote=rtf.RTFFootnote(\n        text=[\n            \"Every subject is counted a single time for each applicable row and column.\"\n        ]\n    ),\n    rtf_source=rtf.RTFSource(\n        text=[\"Source: ADSL and ADAE datasets\"],\n    )\n)\n\n# Write RTF file\ndoc_ae_summary.write_rtf(\"rtf/tlf_ae_summary.rtf\")\n\nrtf/tlf_ae_summary.rtf\n\n\n\n\nPosixPath('pdf/tlf_ae_summary.pdf')",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Adverse Events Summary Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-specific.html",
    "href": "tlf-ae-specific.html",
    "title": "6  Specific Adverse Events Table",
    "section": "",
    "text": "6.1 Setup\nThis article demonstrates how to create a specific adverse events table by System Organ Class and Preferred Term.\nimport polars as pl\nimport rtflite as rtf\n\nadsl = pl.read_parquet(\"data/adsl.parquet\")\nadae = pl.read_parquet(\"data/adae.parquet\")\ntreatments = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"]",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Specific Adverse Events Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-specific.html#prepare-ae-summary-data",
    "href": "tlf-ae-specific.html#prepare-ae-summary-data",
    "title": "6  Specific Adverse Events Table",
    "section": "6.2 Prepare AE Summary Data",
    "text": "6.2 Prepare AE Summary Data\n\n# Get safety population counts and AE data\nadsl_safety = adsl.filter(pl.col(\"SAFFL\") == \"Y\").select([\"USUBJID\", \"TRT01A\"])\nadae_safety = adae.join(adsl_safety, on=\"USUBJID\", how=\"inner\")\npop_counts = adsl_safety.group_by(\"TRT01A\").agg(N=pl.len()).sort(\"TRT01A\")\n\n# Calculate AE counts by SOC and term\nae_counts = (\n    adae_safety.with_columns(pl.col(\"AEDECOD\").str.to_titlecase())\n    .group_by([\"TRT01A\", \"AEBODSYS\", \"AEDECOD\"])\n    .agg(n=pl.col(\"USUBJID\").n_unique())\n    .sort([\"AEBODSYS\", \"AEDECOD\", \"TRT01A\"])\n)\n\n# Build table rows\ntable_data = [\n    [\"Participants in population\"] + [str(pop_counts.filter(pl.col(\"TRT01A\") == t)[\"N\"][0]) for t in treatments],\n    [\"\"] * 4  # Blank row\n]\n\n# Add SOC and AE term rows\nfor soc in ae_counts[\"AEBODSYS\"].unique().sort():\n    table_data.append([soc] + [\"\"] * 3)\n    soc_data = ae_counts.filter(pl.col(\"AEBODSYS\") == soc)\n    \n    for ae in soc_data[\"AEDECOD\"].unique().sort():\n        row = [f\"  {ae}\"]\n        for trt in treatments:\n            count = soc_data.filter((pl.col(\"AEDECOD\") == ae) & (pl.col(\"TRT01A\") == trt))\n            row.append(str(count[\"n\"][0]) if count.height &gt; 0 else \"0\")\n        table_data.append(row)\n\ndf_ae_specific = pl.DataFrame(table_data, schema=[\"\"] + treatments, orient=\"row\")",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Specific Adverse Events Table</span>"
    ]
  },
  {
    "objectID": "tlf-ae-specific.html#create-rtf-output",
    "href": "tlf-ae-specific.html#create-rtf-output",
    "title": "6  Specific Adverse Events Table",
    "section": "6.3 Create RTF Output",
    "text": "6.3 Create RTF Output\n\ndoc_ae_specific = rtf.RTFDocument(\n    df=df_ae_specific,\n    rtf_title=rtf.RTFTitle(text=[\"Specific Adverse Events\", \"(Safety Analysis Population)\"]),\n    rtf_column_header=rtf.RTFColumnHeader(\n        text=[\"\", \"Placebo\\nn\", \"Xanomeline Low Dose\\nn\", \"Xanomeline High Dose\\nn\"],\n        col_rel_width=[4, 1, 1, 1],\n        text_justification=[\"l\", \"c\", \"c\", \"c\"],\n    ),\n    rtf_body=rtf.RTFBody(\n        col_rel_width=[4, 1, 1, 1],\n        text_justification=[\"l\", \"c\", \"c\", \"c\"],\n        text_font_style=lambda df, i, j: \"bold\" if j == 0 and \"  \" not in str(df[i, j]) else \"\",\n    ),\n    rtf_footnote=rtf.RTFFootnote(text=[\"Number of participants with specific adverse events.\"]),\n    rtf_source=rtf.RTFSource(text=[\"Source: ADSL and ADAE datasets\"])\n)\n\ndoc_ae_specific.write_rtf(\"rtf/tlf_ae_specific.rtf\")\n\nrtf/tlf_ae_specific.rtf\n\n\n\n\nPosixPath('pdf/tlf_ae_specific.pdf')",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Specific Adverse Events Table</span>"
    ]
  },
  {
    "objectID": "tlf-efficacy-ancova.html",
    "href": "tlf-efficacy-ancova.html",
    "title": "7  ANCOVA Efficacy Analysis",
    "section": "",
    "text": "7.1 Setup\nThis article demonstrates how to create an ANCOVA efficacy table for glucose levels at Week 24 with LOCF imputation.\nimport polars as pl\nimport rtflite as rtf\nimport pandas as pd\nimport numpy as np\nimport statsmodels.formula.api as smf\nfrom scipy import stats as scipy_stats\nfrom importlib.resources import files\n\nadsl = pl.read_parquet(\"data/adsl.parquet\")\nadlbc = pl.read_parquet(\"data/adlbc.parquet\")\ntreatments = [\"Placebo\", \"Xanomeline Low Dose\", \"Xanomeline High Dose\"]",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>ANCOVA Efficacy Analysis</span>"
    ]
  },
  {
    "objectID": "tlf-efficacy-ancova.html#prepare-analysis-data",
    "href": "tlf-efficacy-ancova.html#prepare-analysis-data",
    "title": "7  ANCOVA Efficacy Analysis",
    "section": "7.2 Prepare Analysis Data",
    "text": "7.2 Prepare Analysis Data\n\n# Clean data types and filter for efficacy population\nadlbc_clean = adlbc.with_columns(\n    [pl.col(c).cast(str).str.strip_chars() for c in [\"USUBJID\", \"PARAMCD\", \"AVISIT\", \"TRTP\"]]\n)\nadsl_eff = adsl.filter(pl.col(\"EFFFL\") == \"Y\").select([\"USUBJID\"])\nadlbc_eff = adlbc_clean.join(adsl_eff, on=\"USUBJID\", how=\"inner\")\n\n# Apply LOCF for glucose data up to Week 24\ngluc_data = (\n    adlbc_eff.filter((pl.col(\"PARAMCD\") == \"GLUC\") & (pl.col(\"AVISITN\") &lt;= 24))\n    .sort([\"USUBJID\", \"AVISITN\"])\n    .group_by(\"USUBJID\")\n    .agg([\n        pl.col(\"TRTP\").first(),\n        pl.col(\"BASE\").first(),\n        pl.col(\"AVAL\").filter(pl.col(\"AVISITN\") == 0).first().alias(\"Baseline\"),\n        pl.col(\"AVAL\").last().alias(\"Week 24\")\n    ])\n    .filter(pl.col(\"Baseline\").is_not_null() & pl.col(\"Week 24\").is_not_null())\n    .with_columns((pl.col(\"Week 24\") - pl.col(\"Baseline\")).alias(\"CHG\"))\n)\n\n# Calculate descriptive statistics\ndesc_stats = []\nfor trt in treatments:\n    trt_data = gluc_data.filter(pl.col(\"TRTP\") == trt)\n    baseline_full = adlbc_eff.filter(\n        (pl.col(\"PARAMCD\") == \"GLUC\") & (pl.col(\"AVISIT\") == \"Baseline\") & (pl.col(\"TRTP\") == trt)\n    )\n    \n    desc_stats.append({\n        \"Treatment\": trt,\n        \"N_Baseline\": baseline_full.height,\n        \"Baseline_Mean\": baseline_full[\"AVAL\"].mean() if baseline_full.height &gt; 0 else np.nan,\n        \"Baseline_SD\": baseline_full[\"AVAL\"].std() if baseline_full.height &gt; 0 else np.nan,\n        \"N_Week24\": trt_data.height,\n        \"Week24_Mean\": trt_data[\"Week 24\"].mean() if trt_data.height &gt; 0 else np.nan,\n        \"Week24_SD\": trt_data[\"Week 24\"].std() if trt_data.height &gt; 0 else np.nan,\n        \"N_Change\": trt_data.height,\n        \"Change_Mean\": trt_data[\"CHG\"].mean() if trt_data.height &gt; 0 else np.nan,\n        \"Change_SD\": trt_data[\"CHG\"].std() if trt_data.height &gt; 0 else np.nan\n    })\n\n# Perform ANCOVA\nancova_df = gluc_data.to_pandas()\nancova_df[\"TRTP\"] = pd.Categorical(ancova_df[\"TRTP\"], categories=treatments)\nmodel = smf.ols(\"CHG ~ TRTP + BASE\", data=ancova_df).fit()\n\n# Calculate LS means and confidence intervals\nbase_mean = ancova_df[\"BASE\"].mean()\nvar_cov = model.cov_params()\nls_means = []\n\nfor i, trt in enumerate(treatments):\n    x_pred = np.array([1, int(i==1), int(i==2), base_mean])\n    ls_mean = model.predict(pd.DataFrame({\"TRTP\": [trt], \"BASE\": [base_mean]}))[0]\n    se_pred = np.sqrt(x_pred @ var_cov @ x_pred.T)\n    \n    ls_means.append({\n        \"Treatment\": trt,\n        \"LS_Mean\": ls_mean,\n        \"CI_Lower\": ls_mean - 1.96 * se_pred,\n        \"CI_Upper\": ls_mean + 1.96 * se_pred\n    })",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>ANCOVA Efficacy Analysis</span>"
    ]
  },
  {
    "objectID": "tlf-efficacy-ancova.html#create-tables-for-rtf-output",
    "href": "tlf-efficacy-ancova.html#create-tables-for-rtf-output",
    "title": "7  ANCOVA Efficacy Analysis",
    "section": "7.3 Create Tables for RTF Output",
    "text": "7.3 Create Tables for RTF Output\n\n# Table 1: Descriptive Statistics\ntbl1_data = [\n    [\n        s[\"Treatment\"],\n        str(s[\"N_Baseline\"]),\n        f\"{s['Baseline_Mean']:.1f} ({s['Baseline_SD']:.2f})\",\n        str(s[\"N_Week24\"]),\n        f\"{s['Week24_Mean']:.1f} ({s['Week24_SD']:.2f})\",\n        str(s[\"N_Change\"]),\n        f\"{s['Change_Mean']:.1f} ({s['Change_SD']:.2f})\",\n        f\"{ls['LS_Mean']:.2f} ({ls['CI_Lower']:.2f}, {ls['CI_Upper']:.2f})\"\n    ]\n    for s, ls in zip(desc_stats, ls_means)\n]\n\ntbl1 = pl.DataFrame(tbl1_data, orient=\"row\", schema=[\n    \"Treatment\", \"N_Base\", \"Mean_SD_Base\", \"N_Wk24\", \"Mean_SD_Wk24\", \n    \"N_Chg\", \"Mean_SD_Chg\", \"LS_Mean_CI\"\n])\n\n# Table 2: Pairwise Comparisons\ntbl2_data = []\nfor comp_name, trt_name in [(\"Xanomeline Low Dose - Placebo\", \"TRTP[T.Xanomeline Low Dose]\"),\n                             (\"Xanomeline High Dose - Placebo\", \"TRTP[T.Xanomeline High Dose]\")] :\n    coef = model.params[trt_name]\n    se = model.bse[trt_name]\n    t_stat = coef / se\n    p_value = 2 * (1 - scipy_stats.t.cdf(abs(t_stat), model.df_resid))\n    \n    tbl2_data.append([\n        comp_name,\n        f\"{coef:.2f} ({coef - 1.96*se:.2f}, {coef + 1.96*se:.2f})\",\n        f\"{p_value:.3f}\"\n    ])\n\ntbl2 = pl.DataFrame(tbl2_data, orient=\"row\", schema=[\"Comparison\", \"Diff_CI\", \"P_Value\"])",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>ANCOVA Efficacy Analysis</span>"
    ]
  },
  {
    "objectID": "tlf-efficacy-ancova.html#create-rtf-document",
    "href": "tlf-efficacy-ancova.html#create-rtf-document",
    "title": "7  ANCOVA Efficacy Analysis",
    "section": "7.4 Create RTF Document",
    "text": "7.4 Create RTF Document\n\n# Create RTF document with two sections\ndoc_ancova = rtf.RTFDocument(\n    df=[tbl1, tbl2],\n    rtf_title=rtf.RTFTitle(text=[\n        \"ANCOVA of Change from Baseline Glucose (mmol/L) at Week 24\", \"LOCF\", \n        \"Efficacy Analysis Population\"\n    ]),\n    rtf_column_header=[\n        [rtf.RTFColumnHeader(text=[\"\", \"Baseline\", \"Week 24\", \"Change from Baseline\"],\n                           col_rel_width=[3, 2, 2, 4], text_justification=[\"l\", \"c\", \"c\", \"c\"]),\n         rtf.RTFColumnHeader(text=[\"Treatment\", \"N\", \"Mean (SD)\", \"N\", \"Mean (SD)\", \"N\", \n                                  \"Mean (SD)\", \"LS Mean (95% CI){^a}\"],\n                           col_rel_width=[3, 0.7, 1.3, 0.7, 1.3, 0.7, 1.3, 2],\n                           text_justification=[\"l\"] + [\"c\"] * 7, border_bottom=\"single\")],\n        [rtf.RTFColumnHeader(text=[\"Pairwise Comparison\", \"Difference in LS Mean (95% CI){^a}\", \"p-Value\"],\n                           col_rel_width=[5, 4, 2], text_justification=[\"l\", \"c\", \"c\"])]\n    ],\n    rtf_body=[\n        rtf.RTFBody(col_rel_width=[3, 0.7, 1.3, 0.7, 1.3, 0.7, 1.3, 2], \n                   text_justification=[\"l\"] + [\"c\"] * 7),\n        rtf.RTFBody(col_rel_width=[5, 4, 2], text_justification=[\"l\", \"c\", \"c\"])\n    ],\n    rtf_footnote=rtf.RTFFootnote(text=[\n        \"{^a}Based on an ANCOVA model after adjusting baseline value. LOCF approach is used to impute missing values.\",\n        \"ANCOVA = Analysis of Covariance, LOCF = Last Observation Carried Forward\",\n        \"CI = Confidence Interval, LS = Least Squares, SD = Standard Deviation\"\n    ]),\n    rtf_source=rtf.RTFSource(text=[\"Source: ADLBC dataset\"])\n)\n\ndoc_ancova.write_rtf(\"rtf/tlf_efficacy_ancova.rtf\")\n\nrtf/tlf_efficacy_ancova.rtf\n\n\n\n\nPosixPath('pdf/tlf_efficacy_ancova.pdf')",
    "crumbs": [
      "Tables, Listings, and Figures",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>ANCOVA Efficacy Analysis</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "8  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n2",
    "crumbs": [
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111.",
    "crumbs": [
      "References"
    ]
  }
]